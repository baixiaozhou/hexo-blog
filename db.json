{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copycode.scss","path":"css/copycode.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.scss","path":"css/copyright.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.scss","path":"css/donate.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/recent-comments.js","path":"js/recent-comments.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/images/gc.png","path":"images/gc.png","modified":0,"renderable":0},{"_id":"source/images/vmstat.png","path":"images/vmstat.png","modified":0,"renderable":0},{"_id":"source/images/stress-cpu.png","path":"images/stress-cpu.png","modified":0,"renderable":0},{"_id":"source/images/top-process.png","path":"images/top-process.png","modified":0,"renderable":0},{"_id":"source/images/top.png","path":"images/top.png","modified":0,"renderable":0},{"_id":"source/images/perftop.png","path":"images/perftop.png","modified":0,"renderable":0},{"_id":"source/images/javafire.png","path":"images/javafire.png","modified":0,"renderable":0},{"_id":"source/images/javaperftop.png","path":"images/javaperftop.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1723521948801},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1723522025937},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1723522023830},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1723522025948},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1723522025937},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1723522025948},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1723522025949},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1723522025949},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1723522025949},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1723522025949},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1723522025949},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1723522025949},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1723522025949},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1723522025950},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1723522025950},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1723522025950},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1723522025950},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1723522025950},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1723522025950},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1723522025950},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1723522025950},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1723522025952},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1723522025951},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1723522025952},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1723522025827},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1723522025952},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1723522025952},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1723522025953},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1723522025953},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1723522023839},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1723522023841},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1723522023840},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1723522023841},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1723522023847},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1723522023848},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1723522023848},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1723522023838},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1723522023838},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1723522023839},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1723522023839},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1723522023841},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1723522023840},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1723522023841},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1723522025949},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1723522023841},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1723522023841},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1723522023847},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1723522023848},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1723522023839},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1723522023840},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1723522023848},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1723522023848},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1723522023848},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1723522025936},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1723522025937},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1723522025938},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1723522025947},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1723522023840},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1723522023837},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1723522023840},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1723522023841},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1723522023847},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1723522023848},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1723522025938},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1723522025938},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1723522023848},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1723522025940},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1723522025940},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1723522025940},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1723522025940},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1723522025947},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1723522025947},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1723522025947},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1723522025947},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1723522025944},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1723522025940},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1723522025935},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1723522025907},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1723522025825},{"_id":"public/2024/08/13/hello-world/index.html","hash":"e46061b303409e4e2e1c071863ad5603615cb6bd","modified":1723542531360},{"_id":"public/archives/index.html","hash":"b8f31b41d96ea8bcd7f1b1231d03ea3e1ac91bb4","modified":1723723070634},{"_id":"public/archives/2024/index.html","hash":"012c6140d4f678978610891ff664e2212defba34","modified":1723723070634},{"_id":"public/archives/2024/08/index.html","hash":"9365cfb38c6449b01b3789df4355b87e7deb356f","modified":1723723070634},{"_id":"public/index.html","hash":"f7de0a8a2f6dc2440a5ac5a4803a5a9b4daf0989","modified":1723800420184},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1723524572765},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1723524572765},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1723524572765},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1723524572765},{"_id":"public/css/style.css","hash":"dd73aa06b48cc31fbd05a487e5d0c588e5a036d6","modified":1723532857692},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1723524572765},{"_id":"themes/maupassant-hexo/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1723532799142},{"_id":"themes/maupassant-hexo/README.md","hash":"c6da8254deefb8054dfb3e174f6113b860ccde69","modified":1723532799142},{"_id":"themes/maupassant-hexo/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1723532799147},{"_id":"themes/maupassant-hexo/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1723532799142},{"_id":"themes/maupassant-hexo/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1723532799142},{"_id":"themes/maupassant-hexo/_config.yml","hash":"3d3439b3b0972ec9e7ac9f0458991b1f6a8ff1e0","modified":1723532799142},{"_id":"themes/maupassant-hexo/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1723532799142},{"_id":"themes/maupassant-hexo/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1723532799143},{"_id":"themes/maupassant-hexo/languages/en.yml","hash":"27d8484ce29989317624e9852c5495289fe5501c","modified":1723532799142},{"_id":"themes/maupassant-hexo/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1723532799143},{"_id":"themes/maupassant-hexo/languages/nb-NO.yml","hash":"dfef2a8f7582f9bccf7cf8376fb2b96c1e452d5f","modified":1723532799143},{"_id":"themes/maupassant-hexo/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1723532799143},{"_id":"themes/maupassant-hexo/layout/base-without-sidebar.pug","hash":"6b1ff15ae71223ef2cae1a56e40d2354cf40ff31","modified":1723532799146},{"_id":"themes/maupassant-hexo/languages/zh-CN.yml","hash":"433484ab11838cc8540aceaf13eb718fa180ed9c","modified":1723532799143},{"_id":"themes/maupassant-hexo/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1723532799143},{"_id":"themes/maupassant-hexo/layout/archive.pug","hash":"9bf5245929529576b5d6678142276adf3c221a6d","modified":1723532799146},{"_id":"themes/maupassant-hexo/languages/zh-TW.yml","hash":"58905c7fa82ee4f2232bcd00301dfcd7b711c61e","modified":1723532799143},{"_id":"themes/maupassant-hexo/layout/blogroll.pug","hash":"31106223b01f45ab0b9747f91db104b0f0d1d4cc","modified":1723532799147},{"_id":"themes/maupassant-hexo/layout/base.pug","hash":"ebfbb48e5f4b6810d5ea0b9e1bb252196ff698e8","modified":1723532799146},{"_id":"themes/maupassant-hexo/layout/page.pug","hash":"9b72086ff877de064f804a59684140af09470484","modified":1723532799147},{"_id":"themes/maupassant-hexo/layout/index.pug","hash":"3e71a8b314b57a3e8b9f1d275c482361025afb23","modified":1723532799147},{"_id":"themes/maupassant-hexo/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1723532799147},{"_id":"themes/maupassant-hexo/layout/tagcloud.pug","hash":"5c06b2a267070bd866b911cc894f314e97dfe2b4","modified":1723532799147},{"_id":"themes/maupassant-hexo/layout/timeline.pug","hash":"cef82a79f57e4e491f2934d990da939c4bebceb6","modified":1723532799147},{"_id":"themes/maupassant-hexo/layout/_partial/darkmode.pug","hash":"82567449d68025cc7fee5259d4769f5ee015aa26","modified":1723532799144},{"_id":"themes/maupassant-hexo/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1723532799144},{"_id":"themes/maupassant-hexo/layout/_partial/head.pug","hash":"a0dbd6ca60ff37f6c4f0aa89ee018b4c37b3d71e","modified":1723532799144},{"_id":"themes/maupassant-hexo/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1723532799144},{"_id":"themes/maupassant-hexo/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1723532799144},{"_id":"themes/maupassant-hexo/layout/_partial/after_footer.pug","hash":"e3e3edc6bccc3e9b111eeefade998784a147266d","modified":1723532799144},{"_id":"themes/maupassant-hexo/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1723532799145},{"_id":"themes/maupassant-hexo/layout/_partial/mathjax2.pug","hash":"f91a71eb8a1af225a4f0f7749fedf534cc0ceae0","modified":1723532799144},{"_id":"themes/maupassant-hexo/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1723532799145},{"_id":"themes/maupassant-hexo/layout/_partial/comments.pug","hash":"046d6453fd31e338b8cc9311dc8b6d86a9cca074","modified":1723532799144},{"_id":"themes/maupassant-hexo/layout/_partial/tag.pug","hash":"a21ffd35f129244729ad64128cafe4781447c96d","modified":1723532799145},{"_id":"themes/maupassant-hexo/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1723532799145},{"_id":"themes/maupassant-hexo/layout/_widget/category.pug","hash":"f2e9f6ff02b858b507f61768753b54846491f87a","modified":1723532799145},{"_id":"themes/maupassant-hexo/layout/_partial/wordcount.pug","hash":"7dde69ef8f86745b83ba5f03c75717a782752f2b","modified":1723532799145},{"_id":"themes/maupassant-hexo/layout/_widget/recent_comments.pug","hash":"e63c9f0a770324a03146fc263f3000c7cdc59631","modified":1723532799146},{"_id":"themes/maupassant-hexo/layout/_widget/copyright.pug","hash":"17e68ea3e87f128819d16ec30cd506a51fe80a7f","modified":1723532799145},{"_id":"themes/maupassant-hexo/layout/_widget/recent_posts.pug","hash":"5a86fcd97933c665b5afef701d8b30cfd2952691","modified":1723532799146},{"_id":"themes/maupassant-hexo/layout/_widget/donate.pug","hash":"859eddafd2762072bc5af850038ff377578b0ce4","modified":1723532799145},{"_id":"themes/maupassant-hexo/layout/_widget/search.pug","hash":"a141293ce93b312f4db9f28207d02ee578ede359","modified":1723532799146},{"_id":"themes/maupassant-hexo/layout/_widget/tag.pug","hash":"9b73975ac67b471ae91803b8477932d2c5e5a4f2","modified":1723532799146},{"_id":"themes/maupassant-hexo/layout/_widget/info.pug","hash":"82359802de5a4e3d80ec9a3737b071fd5c3be221","modified":1723532799146},{"_id":"themes/maupassant-hexo/layout/_widget/links.pug","hash":"3f6048423887f359bb97d17621e961495d209a7c","modified":1723532799146},{"_id":"themes/maupassant-hexo/source/css/copyright.scss","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1723532799148},{"_id":"themes/maupassant-hexo/source/css/copycode.scss","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1723532799148},{"_id":"themes/maupassant-hexo/source/css/search.scss","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1723532799148},{"_id":"themes/maupassant-hexo/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1723532799148},{"_id":"themes/maupassant-hexo/source/css/donate.scss","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1723532799148},{"_id":"themes/maupassant-hexo/source/css/style.scss","hash":"388b9d5d850c042da2997d17c90a99fb83cb0150","modified":1723532799148},{"_id":"themes/maupassant-hexo/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1723532799149},{"_id":"themes/maupassant-hexo/source/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1723532799149},{"_id":"themes/maupassant-hexo/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1723532799149},{"_id":"themes/maupassant-hexo/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1723532799149},{"_id":"themes/maupassant-hexo/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1723532799149},{"_id":"themes/maupassant-hexo/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1723532799149},{"_id":"themes/maupassant-hexo/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1723532799150},{"_id":"themes/maupassant-hexo/source/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1723532799150},{"_id":"themes/maupassant-hexo/source/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1723532799150},{"_id":"themes/maupassant-hexo/layout/post.pug","hash":"f69362f8bffcccf696f793b6084cdec773b85cc1","modified":1723532799147},{"_id":"themes/maupassant-hexo/source/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1723532799150},{"_id":"themes/maupassant-hexo/source/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1723532799150},{"_id":"themes/maupassant-hexo/source/js/fancybox.js","hash":"0ec64dd79760e01f7d88611b1bd5221ec30b80cb","modified":1723532799150},{"_id":"themes/maupassant-hexo/source/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1723532799150},{"_id":"themes/maupassant-hexo/source/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1723532799150},{"_id":"themes/maupassant-hexo/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1723532799151},{"_id":"themes/maupassant-hexo/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1723532799151},{"_id":"themes/maupassant-hexo/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1723532799151},{"_id":"public/css/copycode.scss","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1723532857692},{"_id":"public/css/copyright.scss","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1723532857692},{"_id":"public/css/style.scss","hash":"388b9d5d850c042da2997d17c90a99fb83cb0150","modified":1723532857692},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1723541971718},{"_id":"public/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1723541971718},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1723541971718},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1723541971718},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1723541971718},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1723541971718},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1723541971718},{"_id":"public/css/donate.scss","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1723532857692},{"_id":"public/css/search.scss","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1723532857692},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1723541971718},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1723541971718},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1723541971718},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1723541971718},{"_id":"public/js/fancybox.js","hash":"0ec64dd79760e01f7d88611b1bd5221ec30b80cb","modified":1723541971718},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1723541971718},{"_id":"public/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1723541971718},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1723541971718},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1723541971718},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1723541971718},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1723541971718},{"_id":"public/css/copyright.css","hash":"e857156bd1f971fe6abdc22d2b8c82e495387438","modified":1723541971718},{"_id":"public/css/copycode.css","hash":"803d8bf898f47c3929665eb7af97da22f11efacd","modified":1723541971718},{"_id":"public/css/search.css","hash":"0d0f73b357c3bc5077ef657c73f679b22bea93fb","modified":1723541971718},{"_id":"public/css/donate.css","hash":"d631def20dfb661439c506f28dc791f331d506f8","modified":1723541971718},{"_id":"source/_posts/hello-world.md1","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1723536204578},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1723532799142},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1723532799142},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1723532799147},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1723532799142},{"_id":"themes/maupassant/languages/en.yml","hash":"27d8484ce29989317624e9852c5495289fe5501c","modified":1723532799142},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1723532799143},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1723532799142},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1723532799143},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1723532799143},{"_id":"themes/maupassant/languages/nb-NO.yml","hash":"dfef2a8f7582f9bccf7cf8376fb2b96c1e452d5f","modified":1723532799143},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1723532799143},{"_id":"themes/maupassant/README.md","hash":"c6da8254deefb8054dfb3e174f6113b860ccde69","modified":1723532799142},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"58905c7fa82ee4f2232bcd00301dfcd7b711c61e","modified":1723532799143},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"433484ab11838cc8540aceaf13eb718fa180ed9c","modified":1723532799143},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"6b1ff15ae71223ef2cae1a56e40d2354cf40ff31","modified":1723532799146},{"_id":"themes/maupassant/_config.yml","hash":"3d3439b3b0972ec9e7ac9f0458991b1f6a8ff1e0","modified":1723532799142},{"_id":"themes/maupassant/layout/archive.pug","hash":"9bf5245929529576b5d6678142276adf3c221a6d","modified":1723532799146},{"_id":"themes/maupassant/layout/blogroll.pug","hash":"31106223b01f45ab0b9747f91db104b0f0d1d4cc","modified":1723532799147},{"_id":"themes/maupassant/layout/page.pug","hash":"9b72086ff877de064f804a59684140af09470484","modified":1723532799147},{"_id":"themes/maupassant/layout/index.pug","hash":"3e71a8b314b57a3e8b9f1d275c482361025afb23","modified":1723532799147},{"_id":"themes/maupassant/layout/post.pug","hash":"f69362f8bffcccf696f793b6084cdec773b85cc1","modified":1723532799147},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1723532799147},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"5c06b2a267070bd866b911cc894f314e97dfe2b4","modified":1723532799147},{"_id":"themes/maupassant/layout/base.pug","hash":"ebfbb48e5f4b6810d5ea0b9e1bb252196ff698e8","modified":1723532799146},{"_id":"themes/maupassant/source/css/copyright.scss","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1723532799148},{"_id":"themes/maupassant/layout/timeline.pug","hash":"cef82a79f57e4e491f2934d990da939c4bebceb6","modified":1723532799147},{"_id":"themes/maupassant/source/css/copycode.scss","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1723532799148},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1723532799148},{"_id":"themes/maupassant/source/css/donate.scss","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1723532799148},{"_id":"themes/maupassant/source/css/style.scss","hash":"388b9d5d850c042da2997d17c90a99fb83cb0150","modified":1723532799148},{"_id":"themes/maupassant/source/css/search.scss","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1723532799148},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1723532799149},{"_id":"themes/maupassant/source/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1723532799149},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1723532799149},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1723532799149},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1723532799149},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1723532799150},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1723532799149},{"_id":"themes/maupassant/source/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1723532799150},{"_id":"themes/maupassant/source/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1723532799150},{"_id":"themes/maupassant/source/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1723532799150},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"0ec64dd79760e01f7d88611b1bd5221ec30b80cb","modified":1723532799150},{"_id":"themes/maupassant/source/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1723532799150},{"_id":"themes/maupassant/source/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1723532799150},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1723532799151},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"e3e3edc6bccc3e9b111eeefade998784a147266d","modified":1723532799144},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1723532799151},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"82567449d68025cc7fee5259d4769f5ee015aa26","modified":1723532799144},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1723532799144},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"a0dbd6ca60ff37f6c4f0aa89ee018b4c37b3d71e","modified":1723532799144},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1723532799144},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1723532799144},{"_id":"themes/maupassant/source/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1723532799150},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"f91a71eb8a1af225a4f0f7749fedf534cc0ceae0","modified":1723532799144},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1723532799145},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1723532799145},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"a21ffd35f129244729ad64128cafe4781447c96d","modified":1723532799145},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"046d6453fd31e338b8cc9311dc8b6d86a9cca074","modified":1723532799144},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1723532799145},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"7dde69ef8f86745b83ba5f03c75717a782752f2b","modified":1723532799145},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"f2e9f6ff02b858b507f61768753b54846491f87a","modified":1723532799145},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"17e68ea3e87f128819d16ec30cd506a51fe80a7f","modified":1723532799145},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1723532799151},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"859eddafd2762072bc5af850038ff377578b0ce4","modified":1723532799145},{"_id":"themes/maupassant/layout/_widget/info.pug","hash":"82359802de5a4e3d80ec9a3737b071fd5c3be221","modified":1723532799146},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"3f6048423887f359bb97d17621e961495d209a7c","modified":1723532799146},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"e63c9f0a770324a03146fc263f3000c7cdc59631","modified":1723532799146},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"5a86fcd97933c665b5afef701d8b30cfd2952691","modified":1723532799146},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"9b73975ac67b471ae91803b8477932d2c5e5a4f2","modified":1723532799146},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"a141293ce93b312f4db9f28207d02ee578ede359","modified":1723532799146},{"_id":"source/_posts/JAVA问题定位.md","hash":"f95bf5fa4660ff03421cb1dc8ddd82f390cc9a48","modified":1723541872110},{"_id":"source/images/vmstat.png","hash":"c9cf2b97a3fee6dea79ac46252999b5bf28a7510","modified":1723541076248},{"_id":"source/images/gc.png","hash":"ba28184e39dac6e2f18da06e481337441226c8c6","modified":1723540745522},{"_id":"public/2024/08/13/JAVA问题定位/index.html","hash":"9a2fe1afb4dd0cf6083b711bce03391305154b59","modified":1723723070634},{"_id":"public/images/vmstat.png","hash":"c9cf2b97a3fee6dea79ac46252999b5bf28a7510","modified":1723541971718},{"_id":"public/images/gc.png","hash":"ba28184e39dac6e2f18da06e481337441226c8c6","modified":1723541971718},{"_id":"source/_posts/线上问题排查方法汇总.md","hash":"6c60861eb1eb19763491864b2dc030aafd163aaa","modified":1723800253168},{"_id":"source/images/top.png","hash":"a16eb91f4a11db4cefa61e4559588aac3626793b","modified":1723719871917},{"_id":"source/images/stress-cpu.png","hash":"91839b4f8c115981fd31ce2dc7a957143e5d6f08","modified":1723722218268},{"_id":"source/images/top-process.png","hash":"582d184a7c7af782bd7040ead0d5d8c8abee4030","modified":1723721873257},{"_id":"public/2024/08/14/线上问题排查方法汇总/index.html","hash":"48e678a5b3052edcc67d8a442d77ae6a93b9278e","modified":1723800420184},{"_id":"public/images/stress-cpu.png","hash":"91839b4f8c115981fd31ce2dc7a957143e5d6f08","modified":1723723070634},{"_id":"public/images/top.png","hash":"a16eb91f4a11db4cefa61e4559588aac3626793b","modified":1723723070634},{"_id":"public/images/top-process.png","hash":"582d184a7c7af782bd7040ead0d5d8c8abee4030","modified":1723723070634},{"_id":"source/images/perftop.png","hash":"1489c907cc0278a6803c204792803bff98fd66ce","modified":1723783369753},{"_id":"public/images/perftop.png","hash":"1489c907cc0278a6803c204792803bff98fd66ce","modified":1723783725143},{"_id":"source/images/javafire.png","hash":"118c0a92a404c68bb98c7da781617ac3632c2899","modified":1723798820453},{"_id":"source/images/javaperftop.png","hash":"cc8aed116972b9e62e9b6f961e17cd14dca24f5d","modified":1723788874806},{"_id":"public/images/javafire.png","hash":"118c0a92a404c68bb98c7da781617ac3632c2899","modified":1723799470448},{"_id":"public/images/javaperftop.png","hash":"cc8aed116972b9e62e9b6f961e17cd14dca24f5d","modified":1723799470448}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JAVA问题定位","_content":"\n# 一、JAVA 相关命令\n\n## 1.jps\njps - Lists the instrumented Java Virtual Machines (JVMs) on the target system. This command is experimental and unsupported.\n\n相关参数\n```\nOPTIONS\n       The jps command supports a number of options that modify the output of the command. These options are subject to change or removal in the future.\n       -q\n              Suppresses the output of the class name, JAR file name, and arguments passed to the main method, producing only a list of local JVM identifiers.\n       -m\n              Displays the arguments passed to the main method. The output may be null for embedded JVMs.\n       -l\n              Displays the full package name for the application's main class or the full path name to the application's JAR file.\n       -v\n              Displays the arguments passed to the JVM.\n       -V\n              Suppresses the output of the class name, JAR file name, and arguments passed to the main method, producing only a list of local JVM identifiers.\n       -Joption\n              Passes option to the JVM, where option is one of the options described on the reference page for the Java application launcher. For example, -J-Xms48m sets the\n              startup memory to 48 MB. See java(1).\n```\n\n## 2.jinfo\njinfo（Java Virtual Machine Configuration Information）是JDK提供的一个可以实时查看Java虚拟机各种配置参数和系统属性的命令行工具。使用jps命令的-v参数可以查看Java虚拟机启动时显式指定的配置参数，如果想查看没有显式指定的配置参数就可以使用jinfo命令进行查看。另外，jinfo命令还可以查询Java虚拟机进程的System.getProperties()的内容。\n\n以tomcat进程为例\n```\nAttaching to process ID 2045, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.242-b08\nJava System Properties:\n\njava.vendor = Huawei Technologies Co., Ltd\nsun.java.launcher = SUN_STANDARD\ncatalina.base = /usr/share/tomcat\nsun.management.compiler = HotSpot 64-Bit Tiered Compilers\nsun.nio.ch.bugLevel = \ncatalina.useNaming = true\njnidispatch.path = /var/cache/tomcat/temp/jna--903012287/jna4240128671455089550.tmp\nos.name = Linux\nsun.boot.class.path = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/resources.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/rt.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jsse.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jce.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/charsets.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jfr.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/classes\njava.vm.specification.vendor = Oracle Corporation\njava.runtime.version = 1.8.0_242-b08\njna.loaded = true\nuser.name = xxx\ntomcat.util.scan.StandardJarScanFilter.jarsToScan = taglibs-standard-impl*.jar\nshared.loader = \ntomcat.util.buf.StringCache.byte.enabled = true\nuser.language = en\njava.naming.factory.initial = org.apache.naming.java.javaURLContextFactory\nsun.boot.library.path = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/amd64\njava.version = 1.8.0_242\njava.util.logging.manager = org.apache.juli.ClassLoaderLogManager\nuser.timezone = Asia/Shanghai\nsun.arch.data.model = 64\njava.util.concurrent.ForkJoinPool.common.threadFactory = org.apache.catalina.startup.SafeForkJoinWorkerThreadFactory\njava.endorsed.dirs = \nsun.cpu.isalist = \nsun.jnu.encoding = UTF-8\nfile.encoding.pkg = sun.io\npackage.access = sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat.\nfile.separator = /\njava.specification.name = Java Platform API Specification\njava.class.version = 52.0\nuser.country = US\njava.home = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre\njava.vm.info = mixed mode\nos.version = 4.19.90-24.4.v2101.ky10.x86_64\nsun.font.fontmanager = sun.awt.X11FontManager\npath.separator = :\njava.vm.version = 25.242-b08\njboss.i18n.generate-proxies = true\njava.awt.printerjob = sun.print.PSPrinterJob\nsun.io.unicode.encoding = UnicodeLittle\nawt.toolkit = sun.awt.X11.XToolkit\npackage.definition = sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat.\njava.naming.factory.url.pkgs = org.apache.naming\nmail.mime.splitlongparameters = false\njava.security.egd = file:/dev/./urandom\nuser.home = /home/shterm\njava.specification.vendor = Oracle Corporation\ntomcat.util.scan.StandardJarScanFilter.jarsToSkip = activ*.jar,amqp-client.jar,annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,antlr.jar,aopalliance.jar,asm-*.jar,aspectj*.jar,bcp*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-jmx-remote.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina-ws.jar,catalina.jar,cglib-*.jar,classmate.jar,cobertura-*.jar,commons-*.jar,compress-lzf.jar,curator-*.jar,db2-jdbc.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,elasticsearch.jar,geronimo-spec-jaxrpc*.jar,groovy-all.jar,guava.jar,h2*.jar,hamcrest-*.jar,hibernate*.jar,hppc.jar,http*.jar,icu4j-*.jar,itext*.jar,jackson-*.jar,jandex.jar,jasper-el.jar,jasper.jar,jasperreports*.jar,jaspic-api.jar,javamail.jar,javassist.jar,jaxb-*.jar,jaxen*.jar,jboss*.jar,jc*.jar,jdom-*.jar,jedis.jar,jetty-*.jar,jfreechart.jar,jgit.jar,jline.jar,jmx-tools.jar,jmx.jar,jna.jar,joda-time.jar,jr-*.jar,jsch.jar,json*.jar,jsoup.jar,jsp-api.jar,jsr166e.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,liquibase-*.jar,log4j*.jar,lucene*.jar,mail*.jar,mariadb-jdbc.jar,mssql-jdbc.jar,mybatis.jar,netty.jar,nmap4j.jar,objenesis*.jar,olap4j.jar,opc*.jar,oracle-jdbc.jar,oraclepki.jar,oro-*.jar,poi*.jar,postgresql-jdbc.jar,quartz.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,snakeyaml.jar,snmp4j.jar,spring*.jar,sshd-core.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,t-digest.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,validation-api.jar,velocypack.jar,websocket-api.jar,wl*.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlbeans.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar,xz.jar,zip4j.jar,zookeeper.jar\njava.library.path = /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\njava.vendor.url = http://jdk.rnd.huawei.com/\njava.vm.vendor = Huawei Technologies Co., Ltd\ncommon.loader = \"${catalina.base}/lib\",\"${catalina.base}/lib/*.jar\",\"${catalina.home}/lib\",\"${catalina.home}/lib/*.jar\"\njava.runtime.name = OpenJDK Runtime Environment\nsun.java.command = org.apache.catalina.startup.Bootstrap start\njava.class.path = /usr/share/tomcat/bin/bootstrap.jar:/usr/share/tomcat/bin/tomcat-juli.jar:/usr/lib/java/commons-daemon.jar\njava.vm.specification.name = Java Virtual Machine Specification\njava.vm.specification.version = 1.8\ncatalina.home = /usr/share/tomcat\nsun.cpu.endian = little\nsun.os.patch.level = unknown\njava.awt.headless = true\njava.io.tmpdir = /var/cache/tomcat/temp\njava.vendor.url.bug = http://jdk.rnd.huawei.com/\nserver.loader = \njava.rmi.server.hostname = 127.0.0.1\njna.platform.library.path = /usr/lib64:/lib64:/usr/lib:/lib:/usr/lib64/tracker-miners-2.0:/usr/lib64/tracker-2.0:/usr/lib64/dyninst:/usr/libexec/sudo:/usr/lib64/sssd:/usr/pgsql-9.6/lib:/usr/lib64/perl5/CORE:/usr/lib64/opencryptoki:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/amd64/jli:/usr/lib64/bind9-export\nos.arch = amd64\njava.awt.graphicsenv = sun.awt.X11GraphicsEnvironment\njava.ext.dirs = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/ext:/usr/java/packages/lib/ext\nuser.dir = /usr/share/tomcat\nline.separator = \n\njava.vm.name = OpenJDK 64-Bit Server VM\nlog4j.configurationFile = /etc/tomcat/log4j2.xml\nfile.encoding = UTF-8\ncom.sun.jndi.ldap.object.disableEndpointIdentification = \njava.specification.version = 1.8\n\nVM Flags:\nNon-default VM flags: -XX:CICompilerCount=4 -XX:GCLogFileSize=20971520 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialHeapSize=243269632 -XX:MaxHeapSize=1610612736 -XX:MaxNewSize=536870912 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=80740352 -XX:NumberOfGCLogFiles=15 -XX:OldSize=162529280 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseGCLogFileRotation -XX:+UseParallelGC \nCommand line:  -Xmx1536m -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/tomcat -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=15 -XX:GCLogFileSize=20m -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/var/log/tomcat/tomcat-gc-%t.log -Dcom.sun.jndi.ldap.object.disableEndpointIdentification -Dcatalina.base=/usr/share/tomcat -Dcatalina.home=/usr/share/tomcat -Djava.endorsed.dirs= -Djava.io.tmpdir=/var/cache/tomcat/temp -Dlog4j.configurationFile=/etc/tomcat/log4j2.xml -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n```\n\n## 3.jstat\n命令参数说明：\n- generalOptions：通用选项，如果指定一个通用选项，就不能指定任何其他选项或参数。它包括如下两个选项：\n- -help：显示帮助信息。\n- -options：显示outputOptions参数的列表。\n- outputOptions：输出选项，指定显示某一种Java虚拟机信息。\n- -t：把时间戳列显示为输出的第一列。这个时间戳是从Java虚拟机的开始运行到现在的秒数。\n- -h n：每显示n行显示一次表头，其中n为正整数。默认值为 0，即仅在第一行数据显示一次表头。\n- vmid：虚拟机唯一ID（LVMID，Local Virtual Machine Identifier），如果查看本机就是Java进程的进程ID。\n- interval：显示信息的时间间隔，单位默认毫秒。也可以指定秒为单位，比如：1s。如果指定了该参数，jstat命令将每隔这段时间显示一次统计信息。\n- count：显示数据的次数，默认值是无穷大，这将导致jstat命令一直显示统计信息，直到目标JVM终止或jstat命令终止。\n输出选项\n如果不指定通用选项（generalOptions），则可以指定输出选项（outputOptions）。输出选项决定jstat命令显示的内容和格式，具体如下：\n- -class：显示类加载、卸载数量、总空间和装载耗时的统计信息。\n- -compiler：显示即时编译的方法、耗时等信息。\n- -gc：显示堆各个区域内存使用和垃圾回收的统计信息。\n- -gccapacity：显示堆各个区域的容量及其对应的空间的统计信息。\n- -gcutil：显示有关垃圾收集统计信息的摘要。\n- -gccause：显示关于垃圾收集统计信息的摘要(与-gcutil相同)，以及最近和当前垃圾回收的原因。\n- -gcnew：显示新生代的垃圾回收统计信息。\n- -gcnewcapacity：显示新生代的大小及其对应的空间的统计信息。\n- -gcold: 显示老年代和元空间的垃圾回收统计信息。\n- -gcoldcapacity：显示老年代的大小统计信息。\n- -gcmetacapacity：显示元空间的大小的统计信息。\n- -printcompilation：显示即时编译方法的统计信息。\n\n# 二、线程堆栈\n## 1.输出\nJava虚拟机提供了线程转储(Thread dump)的后门，通过这个后门，可以将线程堆栈打印出来。这个后门就是通过向Java进程发送一个QUIT信号，Java虚拟机收到该信号之后，将系统当前的JAVA线程调用堆栈打印出来。\n\n打印方法：\n- jstack -l pid > xxx.txt 需要注意的是，linux系统中往往会用不同的用户去执行不同的程序，此时可能需要通过sudu -u xxx jstack的形式\n- kill -3\n***同时请确保Java命令行中没有DISABLE_JAVADUMP运行选项***\n## 2.线程分析\n通过输出堆栈进行分析 `jstack -l $(jps | grep xxx | awk '{print $1}')` > /tmp/xxx.jstack\n```Lua\n\"SYS_STATUS_CHECKER\" #14 daemon prio=5 os_prio=0 tid=0x00007f5e047bf000 nid=0xe15 waiting on condition [0x00007f5dd43d1000]\n    java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(Native Method)\nru        at com.xxx.xxx.SystemStatusChecker.run(SystemStatusChecker.java:xx)\n        at java.lang.Thread.run(Thread.java:748)        \n    Locked ownable synchronizers:\n        - None\n                \n\"RMI Reaper\" #39 prio=5 os_prio=0 tid=0x00007f5e04e4c800 nid=0xf0b in Object.wait() [0x00007f5dae2c4000]\n    java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000000c0c88d20> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)\n        - locked <0x00000000c0c88d20> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)\n        at sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java:351)\n        at java.lang.Thread.run(Thread.java:748)\n    Locked ownable synchronizers:\n        - None\n        \n\"main\" #1 prio=5 os_prio=0 tid=0x00007f5e0400a000 nid=0xdcb runnable [0x00007f5e0b393000]\n    java.lang.Thread.State: RUNNABLE\n        at java.net.PlainSocketImpl.socketAccept(Native Method)\n        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)\n        at java.net.ServerSocket.implAccept(ServerSocket.java:545)\n        at java.net.ServerSocket.accept(ServerSocket.java:513)\n        at com.xxx.common.xxx.await(CommonMain.java:244)\n        at com.xxx.common.xxx.startup(CommonMain.java:207)\n        at com.xxx.common.xxx.main(CommonMain.java:147)\n    Locked ownable synchronizers:\n        - None\n```\n在RMI线程中可以看到 \" - locked <0x00000000c0c88d20> (a java.lang.ref.ReferenceQueue$Lock)\" 表示该线程已经使用了ID为\"0x00000000c0c88d2\"的锁，锁的ID由系统自动产生\n```\n\"main\"  prio=5     os_prio=0          tid=0x00007f5e0400a000 nid=0xdcb      runnable [0x00007f5e0b393000]\n|       |          |                  |                      |              |         |\n线程名称 线程优先级   操作系统级别的优先级   线程id                 对应的本地线程ID  状态      线程占用内存地址\n```\n\n其中\"线程对应的本地线程id号\"所指的\"本地线程\"是指该Java线程所对应的虚拟机中的本地线程。我们知道Java是解析型语言，执行的实体是Java虚拟机，因此Java语言中的线程是 依附于Java虚拟机中的本地线程来运行的，实际上是本地线程在执行Java线程代码。\n\nJava代码 中创建一个thread，虚拟机在运行期就会创建一个对应的本地线程，而这个本地线程才是真正的线程实体。为了更加深入得理解本地线程和Java线程的关系，在Unix/Linux下，我们可以通 如下方式把Java虚拟机的本地线程打印出来：\n- 使用ps -ef | grep java 获得Java进程ID。\n- 使用pstack <java pid>获得Java虚拟机的本地线程的堆栈\n其中本地线程各项含义如下：\n```\nThread 56 (Thread 0x7f5e0b394700 (LWP 3531))\n|                 |                 |\n|                 |                 +----本地线程id(另一种表示,LWP-light weight process)\n|                 +-------------------本地线程id\n+------------------------------线程名称\n```\n而通过jstack输出的main本地线程ID为0xdcb，其10进制正好为3531。\n\n\"runnable\"表示当前线程处于运行状态。这个runnable状态是从虚拟机的角度来看的, 表示这个线程正在运行\n<p><strong>⚠️ NOTE:</strong> 但是处于Runnable状态的线程不一定真的消耗CPU. 处于Runnable的线程只能说明该线程没有阻塞在java的wait或者sleep方法上，同时也没等待在锁上面。但是如果该线程调用了本地方法，而本地方法处于等待状态，这个时候虚拟机是不知道本地代码中发生 了什么（但操作系统是知道的，pstack就是操作提供的一个命令，它知道当前线程正在执行的本地代码上下文），此时尽管当前线程实际上也是阻塞的状态，但实际上显示出来的还是runnable状态， 这种情况下是不消耗CPU的</p>\n\n```\n1. 处于waittig和blocked状态的线程都不会消耗CPU \n2. 线程频繁地挂起和唤醒需要消耗CPU, 而且代价颇大\n```\n- TIMED_WAITING(on object monitor) 表示当前线程被挂起一段时间,说明该线程正在 执行obj.wait(int time)方法.\n- TIMED_WAITING(sleeping) 表示当前线程被挂起一段时间,即正在执行Thread.sleep(int time)方法. \n- TIMED_WAITING(parking) 当前线程被挂起一段时间,即正在执行Thread.sleep(int time)方法.\n- WAINTING(on object monitor) 当前线程被挂起，即正在执行obj.wait()方法(无参数的wait()方法).\n```\n处于TIMED_WAITING、WAINTING状态的线程一定不消耗CPU. 处于RUNNABLE的线程，要结合当前线程代码的性质判断，是否消耗CPU.\n• 如果是纯Java运算代码，则消耗CPU.\n• 如果是网络IO,很少消耗CPU.\n• 如果是本地代码，结合本地代码的性质判断(可以通过pstack/gstack获取本地线程堆栈)， 如果是纯运算代码，则消耗CPU, 如果被挂起，则不消耗CPU,如果是IO,则不怎么消 耗CPU。\n```\n# 三、相关的排查方法\n## 1.CPU\n生产环境中往往会出现CPU飙高的情况，对于JAVA应用而言，此类问题相对较好确定问题方向。\n### 1.1 使用jstack确定CPU占用高的线程\\\n通过`top`指令，可以看到进程占用的一些基础资源信息，然后“P”键可以按照CPU使用率进行排序，“M”键可以按照内存占用情况进行排序\n\n找到CPU占用高的进程pid，然后将jstack信息定向到一个文件中去，通过`top -Hp pid`查看具体的情况。\n\n通过 `printf '%x\\n' pid`将pid转换为16进制，然后在jstack文件中根据对应的数字进行查找，然后针对性的进行分析\n### 1.2 频繁GC\n有时候我们可以先确定下gc是不是太频繁，使用`jstat -gc pid 1000`命令来对gc分代变化情况进行观察，1000表示采样间隔(ms)，`S0C/S1C、S0U/S1U、EC/EU、OC/OU、MC/MU`分别代表两个Survivor区、Eden区、老年代、元数据区的容量和使用量。`YGC/YGT、FGC/FGCT、GCT`则代表YoungGc、FullGc的耗时和次数以及总耗时。如果看到gc比较频繁，再针对gc方面做进一步分析。\n![alt text](../images/gc.png)\n### 1.3 频繁上下文切换\n针对频繁上下文问题，我们可以使用vmstat命令来进行查看\n![alt text](../images/vmstat.png)\ncs(context switch)一列则代表了上下文切换的次数。\n\n如果我们希望对特定的pid进行监控那么可以使用 `pidstat -w pid`命令，cswch和nvcswch表示自愿及非自愿切换。\n\n## 2.内存\n对于JAVA应用，涉及到的内存问题主要包括OOM、GC问题和堆外内存。\n### 2.1 OOM\nJVM中的内存不足，OOM大致可以分为以下几种情况\n- `Exception in thread \"main\" java.lang.OutOfMemoryError: unable to create new native thread` 这个意思是没有足够的内存空间给线程分配java栈，基本上还是线程池代码写的有问题，比如说忘记shutdown，所以说应该首先从代码层面来寻找问题，使用jstack或者jmap。如果一切都正常，JVM方面可以通过指定Xss来减少单个thread stack的大小。另外也可以在系统层面，可以通过修改`/etc/security/limits.confnofile`和`nproc`来增大os对线程的限制\n- `Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space ` 这个意思是堆的内存占用已经达到-Xmx设置的最大值，应该是最常见的OOM错误了。解决思路仍然是先应该在代码中找，怀疑存在内存泄漏，通过jstack和jmap去定位问题。如果说一切都正常，才需要通过调整Xmx的值来扩大内存。\n- `Caused by: java.lang.OutOfMemoryError: Meta space` 这个意思是元数据区的内存占用已经达到`XX:MaxMetaspaceSize`设置的最大值，排查思路和上面的一致，参数方面可以通过`XX:MaxPermSize`来进行调整\n- `Exception in thread \"main\" java.lang.StackOverflowError` 表示线程栈需要的内存大于Xss值，同样也是先进行排查，参数方面通过Xss来调整，但调整的太大可能又会引起OOM。\n### 2.2 GC问题\ngc问题除了影响cpu也会影响内存，排查思路也是一致的。一般先使用jstat来查看分代变化情况，比如youngGC或者fullGC次数是不是太多呀；EU、OU等指标增长是不是异常等。\n\n线程的话太多而且不被及时gc也会引发oom，大部分就是之前说的`unable to create new native thread`。除了jstack细细分析dump文件外，我们一般先会看下总体线程，通过`pstreee -p pid |wc -l`\n### 2.3 堆外内存\nJVM 的堆外内存主要包括：\n- JVM 自身运行占用的空间；\n- 线程栈分配占用的系统内存；\n- DirectByteBuffer 占用的内存；\n- JNI 里分配的内存；\n- Java 8 开始的元数据空间；\n- NIO 缓存\n- Unsafe 调用分配的内存；\n- codecache\n\n冰山对象：冰山对象是指在 JVM 堆里占用的内存很小，但其实引用了一块很大的本地内存。DirectByteBuffer 和 线程都属于这类对象。\n#### 2.3.1NMT分析堆外内存\nNMT（Native Memory Tracking）是 HotSpot JVM 引入的跟踪 JVM 内部使用的本地内存的一个特性，可以通过 jcmd 工具访问 NMT 数据。NMT 目前不支持跟踪第三方本地代码的内存分配和 JDK 类库。\n\nNMT 不跟踪非 JVM 代码的内存分配，本地代码里的内存泄露需要使用操作系统支持的工具来定位。\n\n#### 2.3.2 开启 NMT\n启用 NMT 会带来 5-10% 的性能损失。NMT 的内存使用率情况需要添加两个机器字 word 到 malloc 内存的 malloc 头里。NMT 内存使用率也被 NMT 跟踪。\n启动命令： `-XX:NativeMemoryTracking=[off | summary | detail]`。\n- off：NMT 默认是关闭的；\n- summary：只收集子系统的内存使用的总计数据；\n- detail：收集每个调用点的内存使用数据。\n\n#### 2.3.3 jcmd 访问 NMT 数据\n命令：\n`jcmd <pid> VM.native_memory [summary | detail | baseline | summary.diff | detail.diff | shutdown] [scale= KB | MB | GB]`\n\n","source":"_posts/JAVA问题定位.md","raw":"---\ntitle: JAVA问题定位\n---\n\n# 一、JAVA 相关命令\n\n## 1.jps\njps - Lists the instrumented Java Virtual Machines (JVMs) on the target system. This command is experimental and unsupported.\n\n相关参数\n```\nOPTIONS\n       The jps command supports a number of options that modify the output of the command. These options are subject to change or removal in the future.\n       -q\n              Suppresses the output of the class name, JAR file name, and arguments passed to the main method, producing only a list of local JVM identifiers.\n       -m\n              Displays the arguments passed to the main method. The output may be null for embedded JVMs.\n       -l\n              Displays the full package name for the application's main class or the full path name to the application's JAR file.\n       -v\n              Displays the arguments passed to the JVM.\n       -V\n              Suppresses the output of the class name, JAR file name, and arguments passed to the main method, producing only a list of local JVM identifiers.\n       -Joption\n              Passes option to the JVM, where option is one of the options described on the reference page for the Java application launcher. For example, -J-Xms48m sets the\n              startup memory to 48 MB. See java(1).\n```\n\n## 2.jinfo\njinfo（Java Virtual Machine Configuration Information）是JDK提供的一个可以实时查看Java虚拟机各种配置参数和系统属性的命令行工具。使用jps命令的-v参数可以查看Java虚拟机启动时显式指定的配置参数，如果想查看没有显式指定的配置参数就可以使用jinfo命令进行查看。另外，jinfo命令还可以查询Java虚拟机进程的System.getProperties()的内容。\n\n以tomcat进程为例\n```\nAttaching to process ID 2045, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.242-b08\nJava System Properties:\n\njava.vendor = Huawei Technologies Co., Ltd\nsun.java.launcher = SUN_STANDARD\ncatalina.base = /usr/share/tomcat\nsun.management.compiler = HotSpot 64-Bit Tiered Compilers\nsun.nio.ch.bugLevel = \ncatalina.useNaming = true\njnidispatch.path = /var/cache/tomcat/temp/jna--903012287/jna4240128671455089550.tmp\nos.name = Linux\nsun.boot.class.path = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/resources.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/rt.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jsse.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jce.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/charsets.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jfr.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/classes\njava.vm.specification.vendor = Oracle Corporation\njava.runtime.version = 1.8.0_242-b08\njna.loaded = true\nuser.name = xxx\ntomcat.util.scan.StandardJarScanFilter.jarsToScan = taglibs-standard-impl*.jar\nshared.loader = \ntomcat.util.buf.StringCache.byte.enabled = true\nuser.language = en\njava.naming.factory.initial = org.apache.naming.java.javaURLContextFactory\nsun.boot.library.path = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/amd64\njava.version = 1.8.0_242\njava.util.logging.manager = org.apache.juli.ClassLoaderLogManager\nuser.timezone = Asia/Shanghai\nsun.arch.data.model = 64\njava.util.concurrent.ForkJoinPool.common.threadFactory = org.apache.catalina.startup.SafeForkJoinWorkerThreadFactory\njava.endorsed.dirs = \nsun.cpu.isalist = \nsun.jnu.encoding = UTF-8\nfile.encoding.pkg = sun.io\npackage.access = sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat.\nfile.separator = /\njava.specification.name = Java Platform API Specification\njava.class.version = 52.0\nuser.country = US\njava.home = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre\njava.vm.info = mixed mode\nos.version = 4.19.90-24.4.v2101.ky10.x86_64\nsun.font.fontmanager = sun.awt.X11FontManager\npath.separator = :\njava.vm.version = 25.242-b08\njboss.i18n.generate-proxies = true\njava.awt.printerjob = sun.print.PSPrinterJob\nsun.io.unicode.encoding = UnicodeLittle\nawt.toolkit = sun.awt.X11.XToolkit\npackage.definition = sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat.\njava.naming.factory.url.pkgs = org.apache.naming\nmail.mime.splitlongparameters = false\njava.security.egd = file:/dev/./urandom\nuser.home = /home/shterm\njava.specification.vendor = Oracle Corporation\ntomcat.util.scan.StandardJarScanFilter.jarsToSkip = activ*.jar,amqp-client.jar,annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,antlr.jar,aopalliance.jar,asm-*.jar,aspectj*.jar,bcp*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-jmx-remote.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina-ws.jar,catalina.jar,cglib-*.jar,classmate.jar,cobertura-*.jar,commons-*.jar,compress-lzf.jar,curator-*.jar,db2-jdbc.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,elasticsearch.jar,geronimo-spec-jaxrpc*.jar,groovy-all.jar,guava.jar,h2*.jar,hamcrest-*.jar,hibernate*.jar,hppc.jar,http*.jar,icu4j-*.jar,itext*.jar,jackson-*.jar,jandex.jar,jasper-el.jar,jasper.jar,jasperreports*.jar,jaspic-api.jar,javamail.jar,javassist.jar,jaxb-*.jar,jaxen*.jar,jboss*.jar,jc*.jar,jdom-*.jar,jedis.jar,jetty-*.jar,jfreechart.jar,jgit.jar,jline.jar,jmx-tools.jar,jmx.jar,jna.jar,joda-time.jar,jr-*.jar,jsch.jar,json*.jar,jsoup.jar,jsp-api.jar,jsr166e.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,liquibase-*.jar,log4j*.jar,lucene*.jar,mail*.jar,mariadb-jdbc.jar,mssql-jdbc.jar,mybatis.jar,netty.jar,nmap4j.jar,objenesis*.jar,olap4j.jar,opc*.jar,oracle-jdbc.jar,oraclepki.jar,oro-*.jar,poi*.jar,postgresql-jdbc.jar,quartz.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,snakeyaml.jar,snmp4j.jar,spring*.jar,sshd-core.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,t-digest.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,validation-api.jar,velocypack.jar,websocket-api.jar,wl*.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlbeans.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar,xz.jar,zip4j.jar,zookeeper.jar\njava.library.path = /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\njava.vendor.url = http://jdk.rnd.huawei.com/\njava.vm.vendor = Huawei Technologies Co., Ltd\ncommon.loader = \"${catalina.base}/lib\",\"${catalina.base}/lib/*.jar\",\"${catalina.home}/lib\",\"${catalina.home}/lib/*.jar\"\njava.runtime.name = OpenJDK Runtime Environment\nsun.java.command = org.apache.catalina.startup.Bootstrap start\njava.class.path = /usr/share/tomcat/bin/bootstrap.jar:/usr/share/tomcat/bin/tomcat-juli.jar:/usr/lib/java/commons-daemon.jar\njava.vm.specification.name = Java Virtual Machine Specification\njava.vm.specification.version = 1.8\ncatalina.home = /usr/share/tomcat\nsun.cpu.endian = little\nsun.os.patch.level = unknown\njava.awt.headless = true\njava.io.tmpdir = /var/cache/tomcat/temp\njava.vendor.url.bug = http://jdk.rnd.huawei.com/\nserver.loader = \njava.rmi.server.hostname = 127.0.0.1\njna.platform.library.path = /usr/lib64:/lib64:/usr/lib:/lib:/usr/lib64/tracker-miners-2.0:/usr/lib64/tracker-2.0:/usr/lib64/dyninst:/usr/libexec/sudo:/usr/lib64/sssd:/usr/pgsql-9.6/lib:/usr/lib64/perl5/CORE:/usr/lib64/opencryptoki:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/amd64/jli:/usr/lib64/bind9-export\nos.arch = amd64\njava.awt.graphicsenv = sun.awt.X11GraphicsEnvironment\njava.ext.dirs = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/ext:/usr/java/packages/lib/ext\nuser.dir = /usr/share/tomcat\nline.separator = \n\njava.vm.name = OpenJDK 64-Bit Server VM\nlog4j.configurationFile = /etc/tomcat/log4j2.xml\nfile.encoding = UTF-8\ncom.sun.jndi.ldap.object.disableEndpointIdentification = \njava.specification.version = 1.8\n\nVM Flags:\nNon-default VM flags: -XX:CICompilerCount=4 -XX:GCLogFileSize=20971520 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialHeapSize=243269632 -XX:MaxHeapSize=1610612736 -XX:MaxNewSize=536870912 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=80740352 -XX:NumberOfGCLogFiles=15 -XX:OldSize=162529280 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseGCLogFileRotation -XX:+UseParallelGC \nCommand line:  -Xmx1536m -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/tomcat -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=15 -XX:GCLogFileSize=20m -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/var/log/tomcat/tomcat-gc-%t.log -Dcom.sun.jndi.ldap.object.disableEndpointIdentification -Dcatalina.base=/usr/share/tomcat -Dcatalina.home=/usr/share/tomcat -Djava.endorsed.dirs= -Djava.io.tmpdir=/var/cache/tomcat/temp -Dlog4j.configurationFile=/etc/tomcat/log4j2.xml -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n```\n\n## 3.jstat\n命令参数说明：\n- generalOptions：通用选项，如果指定一个通用选项，就不能指定任何其他选项或参数。它包括如下两个选项：\n- -help：显示帮助信息。\n- -options：显示outputOptions参数的列表。\n- outputOptions：输出选项，指定显示某一种Java虚拟机信息。\n- -t：把时间戳列显示为输出的第一列。这个时间戳是从Java虚拟机的开始运行到现在的秒数。\n- -h n：每显示n行显示一次表头，其中n为正整数。默认值为 0，即仅在第一行数据显示一次表头。\n- vmid：虚拟机唯一ID（LVMID，Local Virtual Machine Identifier），如果查看本机就是Java进程的进程ID。\n- interval：显示信息的时间间隔，单位默认毫秒。也可以指定秒为单位，比如：1s。如果指定了该参数，jstat命令将每隔这段时间显示一次统计信息。\n- count：显示数据的次数，默认值是无穷大，这将导致jstat命令一直显示统计信息，直到目标JVM终止或jstat命令终止。\n输出选项\n如果不指定通用选项（generalOptions），则可以指定输出选项（outputOptions）。输出选项决定jstat命令显示的内容和格式，具体如下：\n- -class：显示类加载、卸载数量、总空间和装载耗时的统计信息。\n- -compiler：显示即时编译的方法、耗时等信息。\n- -gc：显示堆各个区域内存使用和垃圾回收的统计信息。\n- -gccapacity：显示堆各个区域的容量及其对应的空间的统计信息。\n- -gcutil：显示有关垃圾收集统计信息的摘要。\n- -gccause：显示关于垃圾收集统计信息的摘要(与-gcutil相同)，以及最近和当前垃圾回收的原因。\n- -gcnew：显示新生代的垃圾回收统计信息。\n- -gcnewcapacity：显示新生代的大小及其对应的空间的统计信息。\n- -gcold: 显示老年代和元空间的垃圾回收统计信息。\n- -gcoldcapacity：显示老年代的大小统计信息。\n- -gcmetacapacity：显示元空间的大小的统计信息。\n- -printcompilation：显示即时编译方法的统计信息。\n\n# 二、线程堆栈\n## 1.输出\nJava虚拟机提供了线程转储(Thread dump)的后门，通过这个后门，可以将线程堆栈打印出来。这个后门就是通过向Java进程发送一个QUIT信号，Java虚拟机收到该信号之后，将系统当前的JAVA线程调用堆栈打印出来。\n\n打印方法：\n- jstack -l pid > xxx.txt 需要注意的是，linux系统中往往会用不同的用户去执行不同的程序，此时可能需要通过sudu -u xxx jstack的形式\n- kill -3\n***同时请确保Java命令行中没有DISABLE_JAVADUMP运行选项***\n## 2.线程分析\n通过输出堆栈进行分析 `jstack -l $(jps | grep xxx | awk '{print $1}')` > /tmp/xxx.jstack\n```Lua\n\"SYS_STATUS_CHECKER\" #14 daemon prio=5 os_prio=0 tid=0x00007f5e047bf000 nid=0xe15 waiting on condition [0x00007f5dd43d1000]\n    java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(Native Method)\nru        at com.xxx.xxx.SystemStatusChecker.run(SystemStatusChecker.java:xx)\n        at java.lang.Thread.run(Thread.java:748)        \n    Locked ownable synchronizers:\n        - None\n                \n\"RMI Reaper\" #39 prio=5 os_prio=0 tid=0x00007f5e04e4c800 nid=0xf0b in Object.wait() [0x00007f5dae2c4000]\n    java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000000c0c88d20> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)\n        - locked <0x00000000c0c88d20> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)\n        at sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java:351)\n        at java.lang.Thread.run(Thread.java:748)\n    Locked ownable synchronizers:\n        - None\n        \n\"main\" #1 prio=5 os_prio=0 tid=0x00007f5e0400a000 nid=0xdcb runnable [0x00007f5e0b393000]\n    java.lang.Thread.State: RUNNABLE\n        at java.net.PlainSocketImpl.socketAccept(Native Method)\n        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)\n        at java.net.ServerSocket.implAccept(ServerSocket.java:545)\n        at java.net.ServerSocket.accept(ServerSocket.java:513)\n        at com.xxx.common.xxx.await(CommonMain.java:244)\n        at com.xxx.common.xxx.startup(CommonMain.java:207)\n        at com.xxx.common.xxx.main(CommonMain.java:147)\n    Locked ownable synchronizers:\n        - None\n```\n在RMI线程中可以看到 \" - locked <0x00000000c0c88d20> (a java.lang.ref.ReferenceQueue$Lock)\" 表示该线程已经使用了ID为\"0x00000000c0c88d2\"的锁，锁的ID由系统自动产生\n```\n\"main\"  prio=5     os_prio=0          tid=0x00007f5e0400a000 nid=0xdcb      runnable [0x00007f5e0b393000]\n|       |          |                  |                      |              |         |\n线程名称 线程优先级   操作系统级别的优先级   线程id                 对应的本地线程ID  状态      线程占用内存地址\n```\n\n其中\"线程对应的本地线程id号\"所指的\"本地线程\"是指该Java线程所对应的虚拟机中的本地线程。我们知道Java是解析型语言，执行的实体是Java虚拟机，因此Java语言中的线程是 依附于Java虚拟机中的本地线程来运行的，实际上是本地线程在执行Java线程代码。\n\nJava代码 中创建一个thread，虚拟机在运行期就会创建一个对应的本地线程，而这个本地线程才是真正的线程实体。为了更加深入得理解本地线程和Java线程的关系，在Unix/Linux下，我们可以通 如下方式把Java虚拟机的本地线程打印出来：\n- 使用ps -ef | grep java 获得Java进程ID。\n- 使用pstack <java pid>获得Java虚拟机的本地线程的堆栈\n其中本地线程各项含义如下：\n```\nThread 56 (Thread 0x7f5e0b394700 (LWP 3531))\n|                 |                 |\n|                 |                 +----本地线程id(另一种表示,LWP-light weight process)\n|                 +-------------------本地线程id\n+------------------------------线程名称\n```\n而通过jstack输出的main本地线程ID为0xdcb，其10进制正好为3531。\n\n\"runnable\"表示当前线程处于运行状态。这个runnable状态是从虚拟机的角度来看的, 表示这个线程正在运行\n<p><strong>⚠️ NOTE:</strong> 但是处于Runnable状态的线程不一定真的消耗CPU. 处于Runnable的线程只能说明该线程没有阻塞在java的wait或者sleep方法上，同时也没等待在锁上面。但是如果该线程调用了本地方法，而本地方法处于等待状态，这个时候虚拟机是不知道本地代码中发生 了什么（但操作系统是知道的，pstack就是操作提供的一个命令，它知道当前线程正在执行的本地代码上下文），此时尽管当前线程实际上也是阻塞的状态，但实际上显示出来的还是runnable状态， 这种情况下是不消耗CPU的</p>\n\n```\n1. 处于waittig和blocked状态的线程都不会消耗CPU \n2. 线程频繁地挂起和唤醒需要消耗CPU, 而且代价颇大\n```\n- TIMED_WAITING(on object monitor) 表示当前线程被挂起一段时间,说明该线程正在 执行obj.wait(int time)方法.\n- TIMED_WAITING(sleeping) 表示当前线程被挂起一段时间,即正在执行Thread.sleep(int time)方法. \n- TIMED_WAITING(parking) 当前线程被挂起一段时间,即正在执行Thread.sleep(int time)方法.\n- WAINTING(on object monitor) 当前线程被挂起，即正在执行obj.wait()方法(无参数的wait()方法).\n```\n处于TIMED_WAITING、WAINTING状态的线程一定不消耗CPU. 处于RUNNABLE的线程，要结合当前线程代码的性质判断，是否消耗CPU.\n• 如果是纯Java运算代码，则消耗CPU.\n• 如果是网络IO,很少消耗CPU.\n• 如果是本地代码，结合本地代码的性质判断(可以通过pstack/gstack获取本地线程堆栈)， 如果是纯运算代码，则消耗CPU, 如果被挂起，则不消耗CPU,如果是IO,则不怎么消 耗CPU。\n```\n# 三、相关的排查方法\n## 1.CPU\n生产环境中往往会出现CPU飙高的情况，对于JAVA应用而言，此类问题相对较好确定问题方向。\n### 1.1 使用jstack确定CPU占用高的线程\\\n通过`top`指令，可以看到进程占用的一些基础资源信息，然后“P”键可以按照CPU使用率进行排序，“M”键可以按照内存占用情况进行排序\n\n找到CPU占用高的进程pid，然后将jstack信息定向到一个文件中去，通过`top -Hp pid`查看具体的情况。\n\n通过 `printf '%x\\n' pid`将pid转换为16进制，然后在jstack文件中根据对应的数字进行查找，然后针对性的进行分析\n### 1.2 频繁GC\n有时候我们可以先确定下gc是不是太频繁，使用`jstat -gc pid 1000`命令来对gc分代变化情况进行观察，1000表示采样间隔(ms)，`S0C/S1C、S0U/S1U、EC/EU、OC/OU、MC/MU`分别代表两个Survivor区、Eden区、老年代、元数据区的容量和使用量。`YGC/YGT、FGC/FGCT、GCT`则代表YoungGc、FullGc的耗时和次数以及总耗时。如果看到gc比较频繁，再针对gc方面做进一步分析。\n![alt text](../images/gc.png)\n### 1.3 频繁上下文切换\n针对频繁上下文问题，我们可以使用vmstat命令来进行查看\n![alt text](../images/vmstat.png)\ncs(context switch)一列则代表了上下文切换的次数。\n\n如果我们希望对特定的pid进行监控那么可以使用 `pidstat -w pid`命令，cswch和nvcswch表示自愿及非自愿切换。\n\n## 2.内存\n对于JAVA应用，涉及到的内存问题主要包括OOM、GC问题和堆外内存。\n### 2.1 OOM\nJVM中的内存不足，OOM大致可以分为以下几种情况\n- `Exception in thread \"main\" java.lang.OutOfMemoryError: unable to create new native thread` 这个意思是没有足够的内存空间给线程分配java栈，基本上还是线程池代码写的有问题，比如说忘记shutdown，所以说应该首先从代码层面来寻找问题，使用jstack或者jmap。如果一切都正常，JVM方面可以通过指定Xss来减少单个thread stack的大小。另外也可以在系统层面，可以通过修改`/etc/security/limits.confnofile`和`nproc`来增大os对线程的限制\n- `Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space ` 这个意思是堆的内存占用已经达到-Xmx设置的最大值，应该是最常见的OOM错误了。解决思路仍然是先应该在代码中找，怀疑存在内存泄漏，通过jstack和jmap去定位问题。如果说一切都正常，才需要通过调整Xmx的值来扩大内存。\n- `Caused by: java.lang.OutOfMemoryError: Meta space` 这个意思是元数据区的内存占用已经达到`XX:MaxMetaspaceSize`设置的最大值，排查思路和上面的一致，参数方面可以通过`XX:MaxPermSize`来进行调整\n- `Exception in thread \"main\" java.lang.StackOverflowError` 表示线程栈需要的内存大于Xss值，同样也是先进行排查，参数方面通过Xss来调整，但调整的太大可能又会引起OOM。\n### 2.2 GC问题\ngc问题除了影响cpu也会影响内存，排查思路也是一致的。一般先使用jstat来查看分代变化情况，比如youngGC或者fullGC次数是不是太多呀；EU、OU等指标增长是不是异常等。\n\n线程的话太多而且不被及时gc也会引发oom，大部分就是之前说的`unable to create new native thread`。除了jstack细细分析dump文件外，我们一般先会看下总体线程，通过`pstreee -p pid |wc -l`\n### 2.3 堆外内存\nJVM 的堆外内存主要包括：\n- JVM 自身运行占用的空间；\n- 线程栈分配占用的系统内存；\n- DirectByteBuffer 占用的内存；\n- JNI 里分配的内存；\n- Java 8 开始的元数据空间；\n- NIO 缓存\n- Unsafe 调用分配的内存；\n- codecache\n\n冰山对象：冰山对象是指在 JVM 堆里占用的内存很小，但其实引用了一块很大的本地内存。DirectByteBuffer 和 线程都属于这类对象。\n#### 2.3.1NMT分析堆外内存\nNMT（Native Memory Tracking）是 HotSpot JVM 引入的跟踪 JVM 内部使用的本地内存的一个特性，可以通过 jcmd 工具访问 NMT 数据。NMT 目前不支持跟踪第三方本地代码的内存分配和 JDK 类库。\n\nNMT 不跟踪非 JVM 代码的内存分配，本地代码里的内存泄露需要使用操作系统支持的工具来定位。\n\n#### 2.3.2 开启 NMT\n启用 NMT 会带来 5-10% 的性能损失。NMT 的内存使用率情况需要添加两个机器字 word 到 malloc 内存的 malloc 头里。NMT 内存使用率也被 NMT 跟踪。\n启动命令： `-XX:NativeMemoryTracking=[off | summary | detail]`。\n- off：NMT 默认是关闭的；\n- summary：只收集子系统的内存使用的总计数据；\n- detail：收集每个调用点的内存使用数据。\n\n#### 2.3.3 jcmd 访问 NMT 数据\n命令：\n`jcmd <pid> VM.native_memory [summary | detail | baseline | summary.diff | detail.diff | shutdown] [scale= KB | MB | GB]`\n\n","slug":"JAVA问题定位","published":1,"date":"2024-08-13T08:42:39.872Z","updated":"2024-08-13T09:37:52.110Z","_id":"clzs6evof0000h2on29cp671b","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"一、JAVA-相关命令\"><a href=\"#一、JAVA-相关命令\" class=\"headerlink\" title=\"一、JAVA 相关命令\"></a>一、JAVA 相关命令</h1><h2 id=\"1-jps\"><a href=\"#1-jps\" class=\"headerlink\" title=\"1.jps\"></a>1.jps</h2><p>jps - Lists the instrumented Java Virtual Machines (JVMs) on the target system. This command is experimental and unsupported.</p>\n<p>相关参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS</span><br><span class=\"line\">       The jps command supports a number of options that modify the output of the command. These options are subject to change or removal in the future.</span><br><span class=\"line\">       -q</span><br><span class=\"line\">              Suppresses the output of the class name, JAR file name, and arguments passed to the main method, producing only a list of local JVM identifiers.</span><br><span class=\"line\">       -m</span><br><span class=\"line\">              Displays the arguments passed to the main method. The output may be null for embedded JVMs.</span><br><span class=\"line\">       -l</span><br><span class=\"line\">              Displays the full package name for the application&#x27;s main class or the full path name to the application&#x27;s JAR file.</span><br><span class=\"line\">       -v</span><br><span class=\"line\">              Displays the arguments passed to the JVM.</span><br><span class=\"line\">       -V</span><br><span class=\"line\">              Suppresses the output of the class name, JAR file name, and arguments passed to the main method, producing only a list of local JVM identifiers.</span><br><span class=\"line\">       -Joption</span><br><span class=\"line\">              Passes option to the JVM, where option is one of the options described on the reference page for the Java application launcher. For example, -J-Xms48m sets the</span><br><span class=\"line\">              startup memory to 48 MB. See java(1).</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-jinfo\"><a href=\"#2-jinfo\" class=\"headerlink\" title=\"2.jinfo\"></a>2.jinfo</h2><p>jinfo（Java Virtual Machine Configuration Information）是JDK提供的一个可以实时查看Java虚拟机各种配置参数和系统属性的命令行工具。使用jps命令的-v参数可以查看Java虚拟机启动时显式指定的配置参数，如果想查看没有显式指定的配置参数就可以使用jinfo命令进行查看。另外，jinfo命令还可以查询Java虚拟机进程的System.getProperties()的内容。</p>\n<p>以tomcat进程为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Attaching to process ID 2045, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 25.242-b08</span><br><span class=\"line\">Java System Properties:</span><br><span class=\"line\"></span><br><span class=\"line\">java.vendor = Huawei Technologies Co., Ltd</span><br><span class=\"line\">sun.java.launcher = SUN_STANDARD</span><br><span class=\"line\">catalina.base = /usr/share/tomcat</span><br><span class=\"line\">sun.management.compiler = HotSpot 64-Bit Tiered Compilers</span><br><span class=\"line\">sun.nio.ch.bugLevel = </span><br><span class=\"line\">catalina.useNaming = true</span><br><span class=\"line\">jnidispatch.path = /var/cache/tomcat/temp/jna--903012287/jna4240128671455089550.tmp</span><br><span class=\"line\">os.name = Linux</span><br><span class=\"line\">sun.boot.class.path = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/resources.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/rt.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jsse.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jce.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/charsets.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jfr.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/classes</span><br><span class=\"line\">java.vm.specification.vendor = Oracle Corporation</span><br><span class=\"line\">java.runtime.version = 1.8.0_242-b08</span><br><span class=\"line\">jna.loaded = true</span><br><span class=\"line\">user.name = xxx</span><br><span class=\"line\">tomcat.util.scan.StandardJarScanFilter.jarsToScan = taglibs-standard-impl*.jar</span><br><span class=\"line\">shared.loader = </span><br><span class=\"line\">tomcat.util.buf.StringCache.byte.enabled = true</span><br><span class=\"line\">user.language = en</span><br><span class=\"line\">java.naming.factory.initial = org.apache.naming.java.javaURLContextFactory</span><br><span class=\"line\">sun.boot.library.path = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/amd64</span><br><span class=\"line\">java.version = 1.8.0_242</span><br><span class=\"line\">java.util.logging.manager = org.apache.juli.ClassLoaderLogManager</span><br><span class=\"line\">user.timezone = Asia/Shanghai</span><br><span class=\"line\">sun.arch.data.model = 64</span><br><span class=\"line\">java.util.concurrent.ForkJoinPool.common.threadFactory = org.apache.catalina.startup.SafeForkJoinWorkerThreadFactory</span><br><span class=\"line\">java.endorsed.dirs = </span><br><span class=\"line\">sun.cpu.isalist = </span><br><span class=\"line\">sun.jnu.encoding = UTF-8</span><br><span class=\"line\">file.encoding.pkg = sun.io</span><br><span class=\"line\">package.access = sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat.</span><br><span class=\"line\">file.separator = /</span><br><span class=\"line\">java.specification.name = Java Platform API Specification</span><br><span class=\"line\">java.class.version = 52.0</span><br><span class=\"line\">user.country = US</span><br><span class=\"line\">java.home = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre</span><br><span class=\"line\">java.vm.info = mixed mode</span><br><span class=\"line\">os.version = 4.19.90-24.4.v2101.ky10.x86_64</span><br><span class=\"line\">sun.font.fontmanager = sun.awt.X11FontManager</span><br><span class=\"line\">path.separator = :</span><br><span class=\"line\">java.vm.version = 25.242-b08</span><br><span class=\"line\">jboss.i18n.generate-proxies = true</span><br><span class=\"line\">java.awt.printerjob = sun.print.PSPrinterJob</span><br><span class=\"line\">sun.io.unicode.encoding = UnicodeLittle</span><br><span class=\"line\">awt.toolkit = sun.awt.X11.XToolkit</span><br><span class=\"line\">package.definition = sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat.</span><br><span class=\"line\">java.naming.factory.url.pkgs = org.apache.naming</span><br><span class=\"line\">mail.mime.splitlongparameters = false</span><br><span class=\"line\">java.security.egd = file:/dev/./urandom</span><br><span class=\"line\">user.home = /home/shterm</span><br><span class=\"line\">java.specification.vendor = Oracle Corporation</span><br><span class=\"line\">tomcat.util.scan.StandardJarScanFilter.jarsToSkip = activ*.jar,amqp-client.jar,annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,antlr.jar,aopalliance.jar,asm-*.jar,aspectj*.jar,bcp*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-jmx-remote.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina-ws.jar,catalina.jar,cglib-*.jar,classmate.jar,cobertura-*.jar,commons-*.jar,compress-lzf.jar,curator-*.jar,db2-jdbc.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,elasticsearch.jar,geronimo-spec-jaxrpc*.jar,groovy-all.jar,guava.jar,h2*.jar,hamcrest-*.jar,hibernate*.jar,hppc.jar,http*.jar,icu4j-*.jar,itext*.jar,jackson-*.jar,jandex.jar,jasper-el.jar,jasper.jar,jasperreports*.jar,jaspic-api.jar,javamail.jar,javassist.jar,jaxb-*.jar,jaxen*.jar,jboss*.jar,jc*.jar,jdom-*.jar,jedis.jar,jetty-*.jar,jfreechart.jar,jgit.jar,jline.jar,jmx-tools.jar,jmx.jar,jna.jar,joda-time.jar,jr-*.jar,jsch.jar,json*.jar,jsoup.jar,jsp-api.jar,jsr166e.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,liquibase-*.jar,log4j*.jar,lucene*.jar,mail*.jar,mariadb-jdbc.jar,mssql-jdbc.jar,mybatis.jar,netty.jar,nmap4j.jar,objenesis*.jar,olap4j.jar,opc*.jar,oracle-jdbc.jar,oraclepki.jar,oro-*.jar,poi*.jar,postgresql-jdbc.jar,quartz.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,snakeyaml.jar,snmp4j.jar,spring*.jar,sshd-core.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,t-digest.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,validation-api.jar,velocypack.jar,websocket-api.jar,wl*.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlbeans.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar,xz.jar,zip4j.jar,zookeeper.jar</span><br><span class=\"line\">java.library.path = /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class=\"line\">java.vendor.url = http://jdk.rnd.huawei.com/</span><br><span class=\"line\">java.vm.vendor = Huawei Technologies Co., Ltd</span><br><span class=\"line\">common.loader = &quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;</span><br><span class=\"line\">java.runtime.name = OpenJDK Runtime Environment</span><br><span class=\"line\">sun.java.command = org.apache.catalina.startup.Bootstrap start</span><br><span class=\"line\">java.class.path = /usr/share/tomcat/bin/bootstrap.jar:/usr/share/tomcat/bin/tomcat-juli.jar:/usr/lib/java/commons-daemon.jar</span><br><span class=\"line\">java.vm.specification.name = Java Virtual Machine Specification</span><br><span class=\"line\">java.vm.specification.version = 1.8</span><br><span class=\"line\">catalina.home = /usr/share/tomcat</span><br><span class=\"line\">sun.cpu.endian = little</span><br><span class=\"line\">sun.os.patch.level = unknown</span><br><span class=\"line\">java.awt.headless = true</span><br><span class=\"line\">java.io.tmpdir = /var/cache/tomcat/temp</span><br><span class=\"line\">java.vendor.url.bug = http://jdk.rnd.huawei.com/</span><br><span class=\"line\">server.loader = </span><br><span class=\"line\">java.rmi.server.hostname = 127.0.0.1</span><br><span class=\"line\">jna.platform.library.path = /usr/lib64:/lib64:/usr/lib:/lib:/usr/lib64/tracker-miners-2.0:/usr/lib64/tracker-2.0:/usr/lib64/dyninst:/usr/libexec/sudo:/usr/lib64/sssd:/usr/pgsql-9.6/lib:/usr/lib64/perl5/CORE:/usr/lib64/opencryptoki:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/amd64/jli:/usr/lib64/bind9-export</span><br><span class=\"line\">os.arch = amd64</span><br><span class=\"line\">java.awt.graphicsenv = sun.awt.X11GraphicsEnvironment</span><br><span class=\"line\">java.ext.dirs = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/ext:/usr/java/packages/lib/ext</span><br><span class=\"line\">user.dir = /usr/share/tomcat</span><br><span class=\"line\">line.separator = </span><br><span class=\"line\"></span><br><span class=\"line\">java.vm.name = OpenJDK 64-Bit Server VM</span><br><span class=\"line\">log4j.configurationFile = /etc/tomcat/log4j2.xml</span><br><span class=\"line\">file.encoding = UTF-8</span><br><span class=\"line\">com.sun.jndi.ldap.object.disableEndpointIdentification = </span><br><span class=\"line\">java.specification.version = 1.8</span><br><span class=\"line\"></span><br><span class=\"line\">VM Flags:</span><br><span class=\"line\">Non-default VM flags: -XX:CICompilerCount=4 -XX:GCLogFileSize=20971520 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialHeapSize=243269632 -XX:MaxHeapSize=1610612736 -XX:MaxNewSize=536870912 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=80740352 -XX:NumberOfGCLogFiles=15 -XX:OldSize=162529280 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseGCLogFileRotation -XX:+UseParallelGC </span><br><span class=\"line\">Command line:  -Xmx1536m -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/tomcat -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=15 -XX:GCLogFileSize=20m -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/var/log/tomcat/tomcat-gc-%t.log -Dcom.sun.jndi.ldap.object.disableEndpointIdentification -Dcatalina.base=/usr/share/tomcat -Dcatalina.home=/usr/share/tomcat -Djava.endorsed.dirs= -Djava.io.tmpdir=/var/cache/tomcat/temp -Dlog4j.configurationFile=/etc/tomcat/log4j2.xml -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-jstat\"><a href=\"#3-jstat\" class=\"headerlink\" title=\"3.jstat\"></a>3.jstat</h2><p>命令参数说明：</p>\n<ul>\n<li>generalOptions：通用选项，如果指定一个通用选项，就不能指定任何其他选项或参数。它包括如下两个选项：</li>\n<li>-help：显示帮助信息。</li>\n<li>-options：显示outputOptions参数的列表。</li>\n<li>outputOptions：输出选项，指定显示某一种Java虚拟机信息。</li>\n<li>-t：把时间戳列显示为输出的第一列。这个时间戳是从Java虚拟机的开始运行到现在的秒数。</li>\n<li>-h n：每显示n行显示一次表头，其中n为正整数。默认值为 0，即仅在第一行数据显示一次表头。</li>\n<li>vmid：虚拟机唯一ID（LVMID，Local Virtual Machine Identifier），如果查看本机就是Java进程的进程ID。</li>\n<li>interval：显示信息的时间间隔，单位默认毫秒。也可以指定秒为单位，比如：1s。如果指定了该参数，jstat命令将每隔这段时间显示一次统计信息。</li>\n<li>count：显示数据的次数，默认值是无穷大，这将导致jstat命令一直显示统计信息，直到目标JVM终止或jstat命令终止。<br>输出选项<br>如果不指定通用选项（generalOptions），则可以指定输出选项（outputOptions）。输出选项决定jstat命令显示的内容和格式，具体如下：</li>\n<li>-class：显示类加载、卸载数量、总空间和装载耗时的统计信息。</li>\n<li>-compiler：显示即时编译的方法、耗时等信息。</li>\n<li>-gc：显示堆各个区域内存使用和垃圾回收的统计信息。</li>\n<li>-gccapacity：显示堆各个区域的容量及其对应的空间的统计信息。</li>\n<li>-gcutil：显示有关垃圾收集统计信息的摘要。</li>\n<li>-gccause：显示关于垃圾收集统计信息的摘要(与-gcutil相同)，以及最近和当前垃圾回收的原因。</li>\n<li>-gcnew：显示新生代的垃圾回收统计信息。</li>\n<li>-gcnewcapacity：显示新生代的大小及其对应的空间的统计信息。</li>\n<li>-gcold: 显示老年代和元空间的垃圾回收统计信息。</li>\n<li>-gcoldcapacity：显示老年代的大小统计信息。</li>\n<li>-gcmetacapacity：显示元空间的大小的统计信息。</li>\n<li>-printcompilation：显示即时编译方法的统计信息。</li>\n</ul>\n<h1 id=\"二、线程堆栈\"><a href=\"#二、线程堆栈\" class=\"headerlink\" title=\"二、线程堆栈\"></a>二、线程堆栈</h1><h2 id=\"1-输出\"><a href=\"#1-输出\" class=\"headerlink\" title=\"1.输出\"></a>1.输出</h2><p>Java虚拟机提供了线程转储(Thread dump)的后门，通过这个后门，可以将线程堆栈打印出来。这个后门就是通过向Java进程发送一个QUIT信号，Java虚拟机收到该信号之后，将系统当前的JAVA线程调用堆栈打印出来。</p>\n<p>打印方法：</p>\n<ul>\n<li>jstack -l pid &gt; xxx.txt 需要注意的是，linux系统中往往会用不同的用户去执行不同的程序，此时可能需要通过sudu -u xxx jstack的形式</li>\n<li>kill -3<br><em><strong>同时请确保Java命令行中没有DISABLE_JAVADUMP运行选项</strong></em></li>\n</ul>\n<h2 id=\"2-线程分析\"><a href=\"#2-线程分析\" class=\"headerlink\" title=\"2.线程分析\"></a>2.线程分析</h2><p>通过输出堆栈进行分析 <code>jstack -l $(jps | grep xxx | awk &#39;&#123;print $1&#125;&#39;)</code> &gt; &#x2F;tmp&#x2F;xxx.jstack</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;SYS_STATUS_CHECKER&quot;</span> #<span class=\"number\">14</span> daemon prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f5e047bf000</span> nid=<span class=\"number\">0xe15</span> waiting on condition [<span class=\"number\">0x00007f5dd43d1000</span>]</span><br><span class=\"line\">    java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class=\"line\">        at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">ru        at com.xxx.xxx.SystemStatusChecker.run(SystemStatusChecker.java:xx)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)        </span><br><span class=\"line\">    Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br><span class=\"line\">                </span><br><span class=\"line\"><span class=\"string\">&quot;RMI Reaper&quot;</span> #<span class=\"number\">39</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f5e04e4c800</span> nid=<span class=\"number\">0xf0b</span> <span class=\"keyword\">in</span> Object.wait() [<span class=\"number\">0x00007f5dae2c4000</span>]</span><br><span class=\"line\">    java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">        at java.lang.Object.wait(Native Method)</span><br><span class=\"line\">        - waiting on &lt;<span class=\"number\">0x00000000c0c88d20</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">        at java.lang.ref.ReferenceQueue.<span class=\"built_in\">remove</span>(ReferenceQueue.java:<span class=\"number\">144</span>)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x00000000c0c88d20</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">        at java.lang.ref.ReferenceQueue.<span class=\"built_in\">remove</span>(ReferenceQueue.java:<span class=\"number\">165</span>)</span><br><span class=\"line\">        at sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\">    Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"string\">&quot;main&quot;</span> #<span class=\"number\">1</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f5e0400a000</span> nid=<span class=\"number\">0xdcb</span> runnable [<span class=\"number\">0x00007f5e0b393000</span>]</span><br><span class=\"line\">    java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at java.net.PlainSocketImpl.socketAccept(Native Method)</span><br><span class=\"line\">        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:<span class=\"number\">409</span>)</span><br><span class=\"line\">        at java.net.ServerSocket.implAccept(ServerSocket.java:<span class=\"number\">545</span>)</span><br><span class=\"line\">        at java.net.ServerSocket.accept(ServerSocket.java:<span class=\"number\">513</span>)</span><br><span class=\"line\">        at com.xxx.common.xxx.await(CommonMain.java:<span class=\"number\">244</span>)</span><br><span class=\"line\">        at com.xxx.common.xxx.startup(CommonMain.java:<span class=\"number\">207</span>)</span><br><span class=\"line\">        at com.xxx.common.xxx.main(CommonMain.java:<span class=\"number\">147</span>)</span><br><span class=\"line\">    Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br></pre></td></tr></table></figure>\n<p>在RMI线程中可以看到 “ - locked &lt;0x00000000c0c88d20&gt; (a java.lang.ref.ReferenceQueue$Lock)” 表示该线程已经使用了ID为”0x00000000c0c88d2”的锁，锁的ID由系统自动产生</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot;  prio=5     os_prio=0          tid=0x00007f5e0400a000 nid=0xdcb      runnable [0x00007f5e0b393000]</span><br><span class=\"line\">|       |          |                  |                      |              |         |</span><br><span class=\"line\">线程名称 线程优先级   操作系统级别的优先级   线程id                 对应的本地线程ID  状态      线程占用内存地址</span><br></pre></td></tr></table></figure>\n\n<p>其中”线程对应的本地线程id号”所指的”本地线程”是指该Java线程所对应的虚拟机中的本地线程。我们知道Java是解析型语言，执行的实体是Java虚拟机，因此Java语言中的线程是 依附于Java虚拟机中的本地线程来运行的，实际上是本地线程在执行Java线程代码。</p>\n<p>Java代码 中创建一个thread，虚拟机在运行期就会创建一个对应的本地线程，而这个本地线程才是真正的线程实体。为了更加深入得理解本地线程和Java线程的关系，在Unix&#x2F;Linux下，我们可以通 如下方式把Java虚拟机的本地线程打印出来：</p>\n<ul>\n<li>使用ps -ef | grep java 获得Java进程ID。</li>\n<li>使用pstack <java pid>获得Java虚拟机的本地线程的堆栈<br>其中本地线程各项含义如下：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 56 (Thread 0x7f5e0b394700 (LWP 3531))</span><br><span class=\"line\">|                 |                 |</span><br><span class=\"line\">|                 |                 +----本地线程id(另一种表示,LWP-light weight process)</span><br><span class=\"line\">|                 +-------------------本地线程id</span><br><span class=\"line\">+------------------------------线程名称</span><br></pre></td></tr></table></figure>\n而通过jstack输出的main本地线程ID为0xdcb，其10进制正好为3531。</li>\n</ul>\n<p>“runnable”表示当前线程处于运行状态。这个runnable状态是从虚拟机的角度来看的, 表示这个线程正在运行</p>\n<p><strong>⚠️ NOTE:</strong> 但是处于Runnable状态的线程不一定真的消耗CPU. 处于Runnable的线程只能说明该线程没有阻塞在java的wait或者sleep方法上，同时也没等待在锁上面。但是如果该线程调用了本地方法，而本地方法处于等待状态，这个时候虚拟机是不知道本地代码中发生 了什么（但操作系统是知道的，pstack就是操作提供的一个命令，它知道当前线程正在执行的本地代码上下文），此时尽管当前线程实际上也是阻塞的状态，但实际上显示出来的还是runnable状态， 这种情况下是不消耗CPU的</p>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 处于waittig和blocked状态的线程都不会消耗CPU </span><br><span class=\"line\">2. 线程频繁地挂起和唤醒需要消耗CPU, 而且代价颇大</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TIMED_WAITING(on object monitor) 表示当前线程被挂起一段时间,说明该线程正在 执行obj.wait(int time)方法.</li>\n<li>TIMED_WAITING(sleeping) 表示当前线程被挂起一段时间,即正在执行Thread.sleep(int time)方法. </li>\n<li>TIMED_WAITING(parking) 当前线程被挂起一段时间,即正在执行Thread.sleep(int time)方法.</li>\n<li>WAINTING(on object monitor) 当前线程被挂起，即正在执行obj.wait()方法(无参数的wait()方法).<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">处于TIMED_WAITING、WAINTING状态的线程一定不消耗CPU. 处于RUNNABLE的线程，要结合当前线程代码的性质判断，是否消耗CPU.</span><br><span class=\"line\">• 如果是纯Java运算代码，则消耗CPU.</span><br><span class=\"line\">• 如果是网络IO,很少消耗CPU.</span><br><span class=\"line\">• 如果是本地代码，结合本地代码的性质判断(可以通过pstack/gstack获取本地线程堆栈)， 如果是纯运算代码，则消耗CPU, 如果被挂起，则不消耗CPU,如果是IO,则不怎么消 耗CPU。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"三、相关的排查方法\"><a href=\"#三、相关的排查方法\" class=\"headerlink\" title=\"三、相关的排查方法\"></a>三、相关的排查方法</h1><h2 id=\"1-CPU\"><a href=\"#1-CPU\" class=\"headerlink\" title=\"1.CPU\"></a>1.CPU</h2><p>生产环境中往往会出现CPU飙高的情况，对于JAVA应用而言，此类问题相对较好确定问题方向。</p>\n<h3 id=\"1-1-使用jstack确定CPU占用高的线程\"><a href=\"#1-1-使用jstack确定CPU占用高的线程\" class=\"headerlink\" title=\"1.1 使用jstack确定CPU占用高的线程\\\"></a>1.1 使用jstack确定CPU占用高的线程\\</h3><p>通过<code>top</code>指令，可以看到进程占用的一些基础资源信息，然后“P”键可以按照CPU使用率进行排序，“M”键可以按照内存占用情况进行排序</p>\n<p>找到CPU占用高的进程pid，然后将jstack信息定向到一个文件中去，通过<code>top -Hp pid</code>查看具体的情况。</p>\n<p>通过 <code>printf &#39;%x\\n&#39; pid</code>将pid转换为16进制，然后在jstack文件中根据对应的数字进行查找，然后针对性的进行分析</p>\n<h3 id=\"1-2-频繁GC\"><a href=\"#1-2-频繁GC\" class=\"headerlink\" title=\"1.2 频繁GC\"></a>1.2 频繁GC</h3><p>有时候我们可以先确定下gc是不是太频繁，使用<code>jstat -gc pid 1000</code>命令来对gc分代变化情况进行观察，1000表示采样间隔(ms)，<code>S0C/S1C、S0U/S1U、EC/EU、OC/OU、MC/MU</code>分别代表两个Survivor区、Eden区、老年代、元数据区的容量和使用量。<code>YGC/YGT、FGC/FGCT、GCT</code>则代表YoungGc、FullGc的耗时和次数以及总耗时。如果看到gc比较频繁，再针对gc方面做进一步分析。<br><img src=\"/../images/gc.png\" alt=\"alt text\"></p>\n<h3 id=\"1-3-频繁上下文切换\"><a href=\"#1-3-频繁上下文切换\" class=\"headerlink\" title=\"1.3 频繁上下文切换\"></a>1.3 频繁上下文切换</h3><p>针对频繁上下文问题，我们可以使用vmstat命令来进行查看<br><img src=\"/../images/vmstat.png\" alt=\"alt text\"><br>cs(context switch)一列则代表了上下文切换的次数。</p>\n<p>如果我们希望对特定的pid进行监控那么可以使用 <code>pidstat -w pid</code>命令，cswch和nvcswch表示自愿及非自愿切换。</p>\n<h2 id=\"2-内存\"><a href=\"#2-内存\" class=\"headerlink\" title=\"2.内存\"></a>2.内存</h2><p>对于JAVA应用，涉及到的内存问题主要包括OOM、GC问题和堆外内存。</p>\n<h3 id=\"2-1-OOM\"><a href=\"#2-1-OOM\" class=\"headerlink\" title=\"2.1 OOM\"></a>2.1 OOM</h3><p>JVM中的内存不足，OOM大致可以分为以下几种情况</p>\n<ul>\n<li><code>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: unable to create new native thread</code> 这个意思是没有足够的内存空间给线程分配java栈，基本上还是线程池代码写的有问题，比如说忘记shutdown，所以说应该首先从代码层面来寻找问题，使用jstack或者jmap。如果一切都正常，JVM方面可以通过指定Xss来减少单个thread stack的大小。另外也可以在系统层面，可以通过修改<code>/etc/security/limits.confnofile</code>和<code>nproc</code>来增大os对线程的限制</li>\n<li><code>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space </code> 这个意思是堆的内存占用已经达到-Xmx设置的最大值，应该是最常见的OOM错误了。解决思路仍然是先应该在代码中找，怀疑存在内存泄漏，通过jstack和jmap去定位问题。如果说一切都正常，才需要通过调整Xmx的值来扩大内存。</li>\n<li><code>Caused by: java.lang.OutOfMemoryError: Meta space</code> 这个意思是元数据区的内存占用已经达到<code>XX:MaxMetaspaceSize</code>设置的最大值，排查思路和上面的一致，参数方面可以通过<code>XX:MaxPermSize</code>来进行调整</li>\n<li><code>Exception in thread &quot;main&quot; java.lang.StackOverflowError</code> 表示线程栈需要的内存大于Xss值，同样也是先进行排查，参数方面通过Xss来调整，但调整的太大可能又会引起OOM。</li>\n</ul>\n<h3 id=\"2-2-GC问题\"><a href=\"#2-2-GC问题\" class=\"headerlink\" title=\"2.2 GC问题\"></a>2.2 GC问题</h3><p>gc问题除了影响cpu也会影响内存，排查思路也是一致的。一般先使用jstat来查看分代变化情况，比如youngGC或者fullGC次数是不是太多呀；EU、OU等指标增长是不是异常等。</p>\n<p>线程的话太多而且不被及时gc也会引发oom，大部分就是之前说的<code>unable to create new native thread</code>。除了jstack细细分析dump文件外，我们一般先会看下总体线程，通过<code>pstreee -p pid |wc -l</code></p>\n<h3 id=\"2-3-堆外内存\"><a href=\"#2-3-堆外内存\" class=\"headerlink\" title=\"2.3 堆外内存\"></a>2.3 堆外内存</h3><p>JVM 的堆外内存主要包括：</p>\n<ul>\n<li>JVM 自身运行占用的空间；</li>\n<li>线程栈分配占用的系统内存；</li>\n<li>DirectByteBuffer 占用的内存；</li>\n<li>JNI 里分配的内存；</li>\n<li>Java 8 开始的元数据空间；</li>\n<li>NIO 缓存</li>\n<li>Unsafe 调用分配的内存；</li>\n<li>codecache</li>\n</ul>\n<p>冰山对象：冰山对象是指在 JVM 堆里占用的内存很小，但其实引用了一块很大的本地内存。DirectByteBuffer 和 线程都属于这类对象。</p>\n<h4 id=\"2-3-1NMT分析堆外内存\"><a href=\"#2-3-1NMT分析堆外内存\" class=\"headerlink\" title=\"2.3.1NMT分析堆外内存\"></a>2.3.1NMT分析堆外内存</h4><p>NMT（Native Memory Tracking）是 HotSpot JVM 引入的跟踪 JVM 内部使用的本地内存的一个特性，可以通过 jcmd 工具访问 NMT 数据。NMT 目前不支持跟踪第三方本地代码的内存分配和 JDK 类库。</p>\n<p>NMT 不跟踪非 JVM 代码的内存分配，本地代码里的内存泄露需要使用操作系统支持的工具来定位。</p>\n<h4 id=\"2-3-2-开启-NMT\"><a href=\"#2-3-2-开启-NMT\" class=\"headerlink\" title=\"2.3.2 开启 NMT\"></a>2.3.2 开启 NMT</h4><p>启用 NMT 会带来 5-10% 的性能损失。NMT 的内存使用率情况需要添加两个机器字 word 到 malloc 内存的 malloc 头里。NMT 内存使用率也被 NMT 跟踪。<br>启动命令： <code>-XX:NativeMemoryTracking=[off | summary | detail]</code>。</p>\n<ul>\n<li>off：NMT 默认是关闭的；</li>\n<li>summary：只收集子系统的内存使用的总计数据；</li>\n<li>detail：收集每个调用点的内存使用数据。</li>\n</ul>\n<h4 id=\"2-3-3-jcmd-访问-NMT-数据\"><a href=\"#2-3-3-jcmd-访问-NMT-数据\" class=\"headerlink\" title=\"2.3.3 jcmd 访问 NMT 数据\"></a>2.3.3 jcmd 访问 NMT 数据</h4><p>命令：<br><code>jcmd &lt;pid&gt; VM.native_memory [summary | detail | baseline | summary.diff | detail.diff | shutdown] [scale= KB | MB | GB]</code></p>\n","excerpt":"","more":"<h1 id=\"一、JAVA-相关命令\"><a href=\"#一、JAVA-相关命令\" class=\"headerlink\" title=\"一、JAVA 相关命令\"></a>一、JAVA 相关命令</h1><h2 id=\"1-jps\"><a href=\"#1-jps\" class=\"headerlink\" title=\"1.jps\"></a>1.jps</h2><p>jps - Lists the instrumented Java Virtual Machines (JVMs) on the target system. This command is experimental and unsupported.</p>\n<p>相关参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS</span><br><span class=\"line\">       The jps command supports a number of options that modify the output of the command. These options are subject to change or removal in the future.</span><br><span class=\"line\">       -q</span><br><span class=\"line\">              Suppresses the output of the class name, JAR file name, and arguments passed to the main method, producing only a list of local JVM identifiers.</span><br><span class=\"line\">       -m</span><br><span class=\"line\">              Displays the arguments passed to the main method. The output may be null for embedded JVMs.</span><br><span class=\"line\">       -l</span><br><span class=\"line\">              Displays the full package name for the application&#x27;s main class or the full path name to the application&#x27;s JAR file.</span><br><span class=\"line\">       -v</span><br><span class=\"line\">              Displays the arguments passed to the JVM.</span><br><span class=\"line\">       -V</span><br><span class=\"line\">              Suppresses the output of the class name, JAR file name, and arguments passed to the main method, producing only a list of local JVM identifiers.</span><br><span class=\"line\">       -Joption</span><br><span class=\"line\">              Passes option to the JVM, where option is one of the options described on the reference page for the Java application launcher. For example, -J-Xms48m sets the</span><br><span class=\"line\">              startup memory to 48 MB. See java(1).</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-jinfo\"><a href=\"#2-jinfo\" class=\"headerlink\" title=\"2.jinfo\"></a>2.jinfo</h2><p>jinfo（Java Virtual Machine Configuration Information）是JDK提供的一个可以实时查看Java虚拟机各种配置参数和系统属性的命令行工具。使用jps命令的-v参数可以查看Java虚拟机启动时显式指定的配置参数，如果想查看没有显式指定的配置参数就可以使用jinfo命令进行查看。另外，jinfo命令还可以查询Java虚拟机进程的System.getProperties()的内容。</p>\n<p>以tomcat进程为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Attaching to process ID 2045, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 25.242-b08</span><br><span class=\"line\">Java System Properties:</span><br><span class=\"line\"></span><br><span class=\"line\">java.vendor = Huawei Technologies Co., Ltd</span><br><span class=\"line\">sun.java.launcher = SUN_STANDARD</span><br><span class=\"line\">catalina.base = /usr/share/tomcat</span><br><span class=\"line\">sun.management.compiler = HotSpot 64-Bit Tiered Compilers</span><br><span class=\"line\">sun.nio.ch.bugLevel = </span><br><span class=\"line\">catalina.useNaming = true</span><br><span class=\"line\">jnidispatch.path = /var/cache/tomcat/temp/jna--903012287/jna4240128671455089550.tmp</span><br><span class=\"line\">os.name = Linux</span><br><span class=\"line\">sun.boot.class.path = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/resources.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/rt.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jsse.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jce.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/charsets.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/jfr.jar:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/classes</span><br><span class=\"line\">java.vm.specification.vendor = Oracle Corporation</span><br><span class=\"line\">java.runtime.version = 1.8.0_242-b08</span><br><span class=\"line\">jna.loaded = true</span><br><span class=\"line\">user.name = xxx</span><br><span class=\"line\">tomcat.util.scan.StandardJarScanFilter.jarsToScan = taglibs-standard-impl*.jar</span><br><span class=\"line\">shared.loader = </span><br><span class=\"line\">tomcat.util.buf.StringCache.byte.enabled = true</span><br><span class=\"line\">user.language = en</span><br><span class=\"line\">java.naming.factory.initial = org.apache.naming.java.javaURLContextFactory</span><br><span class=\"line\">sun.boot.library.path = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/amd64</span><br><span class=\"line\">java.version = 1.8.0_242</span><br><span class=\"line\">java.util.logging.manager = org.apache.juli.ClassLoaderLogManager</span><br><span class=\"line\">user.timezone = Asia/Shanghai</span><br><span class=\"line\">sun.arch.data.model = 64</span><br><span class=\"line\">java.util.concurrent.ForkJoinPool.common.threadFactory = org.apache.catalina.startup.SafeForkJoinWorkerThreadFactory</span><br><span class=\"line\">java.endorsed.dirs = </span><br><span class=\"line\">sun.cpu.isalist = </span><br><span class=\"line\">sun.jnu.encoding = UTF-8</span><br><span class=\"line\">file.encoding.pkg = sun.io</span><br><span class=\"line\">package.access = sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat.</span><br><span class=\"line\">file.separator = /</span><br><span class=\"line\">java.specification.name = Java Platform API Specification</span><br><span class=\"line\">java.class.version = 52.0</span><br><span class=\"line\">user.country = US</span><br><span class=\"line\">java.home = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre</span><br><span class=\"line\">java.vm.info = mixed mode</span><br><span class=\"line\">os.version = 4.19.90-24.4.v2101.ky10.x86_64</span><br><span class=\"line\">sun.font.fontmanager = sun.awt.X11FontManager</span><br><span class=\"line\">path.separator = :</span><br><span class=\"line\">java.vm.version = 25.242-b08</span><br><span class=\"line\">jboss.i18n.generate-proxies = true</span><br><span class=\"line\">java.awt.printerjob = sun.print.PSPrinterJob</span><br><span class=\"line\">sun.io.unicode.encoding = UnicodeLittle</span><br><span class=\"line\">awt.toolkit = sun.awt.X11.XToolkit</span><br><span class=\"line\">package.definition = sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat.</span><br><span class=\"line\">java.naming.factory.url.pkgs = org.apache.naming</span><br><span class=\"line\">mail.mime.splitlongparameters = false</span><br><span class=\"line\">java.security.egd = file:/dev/./urandom</span><br><span class=\"line\">user.home = /home/shterm</span><br><span class=\"line\">java.specification.vendor = Oracle Corporation</span><br><span class=\"line\">tomcat.util.scan.StandardJarScanFilter.jarsToSkip = activ*.jar,amqp-client.jar,annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,antlr.jar,aopalliance.jar,asm-*.jar,aspectj*.jar,bcp*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-jmx-remote.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina-ws.jar,catalina.jar,cglib-*.jar,classmate.jar,cobertura-*.jar,commons-*.jar,compress-lzf.jar,curator-*.jar,db2-jdbc.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,elasticsearch.jar,geronimo-spec-jaxrpc*.jar,groovy-all.jar,guava.jar,h2*.jar,hamcrest-*.jar,hibernate*.jar,hppc.jar,http*.jar,icu4j-*.jar,itext*.jar,jackson-*.jar,jandex.jar,jasper-el.jar,jasper.jar,jasperreports*.jar,jaspic-api.jar,javamail.jar,javassist.jar,jaxb-*.jar,jaxen*.jar,jboss*.jar,jc*.jar,jdom-*.jar,jedis.jar,jetty-*.jar,jfreechart.jar,jgit.jar,jline.jar,jmx-tools.jar,jmx.jar,jna.jar,joda-time.jar,jr-*.jar,jsch.jar,json*.jar,jsoup.jar,jsp-api.jar,jsr166e.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,liquibase-*.jar,log4j*.jar,lucene*.jar,mail*.jar,mariadb-jdbc.jar,mssql-jdbc.jar,mybatis.jar,netty.jar,nmap4j.jar,objenesis*.jar,olap4j.jar,opc*.jar,oracle-jdbc.jar,oraclepki.jar,oro-*.jar,poi*.jar,postgresql-jdbc.jar,quartz.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,snakeyaml.jar,snmp4j.jar,spring*.jar,sshd-core.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,t-digest.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,validation-api.jar,velocypack.jar,websocket-api.jar,wl*.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlbeans.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar,xz.jar,zip4j.jar,zookeeper.jar</span><br><span class=\"line\">java.library.path = /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class=\"line\">java.vendor.url = http://jdk.rnd.huawei.com/</span><br><span class=\"line\">java.vm.vendor = Huawei Technologies Co., Ltd</span><br><span class=\"line\">common.loader = &quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;</span><br><span class=\"line\">java.runtime.name = OpenJDK Runtime Environment</span><br><span class=\"line\">sun.java.command = org.apache.catalina.startup.Bootstrap start</span><br><span class=\"line\">java.class.path = /usr/share/tomcat/bin/bootstrap.jar:/usr/share/tomcat/bin/tomcat-juli.jar:/usr/lib/java/commons-daemon.jar</span><br><span class=\"line\">java.vm.specification.name = Java Virtual Machine Specification</span><br><span class=\"line\">java.vm.specification.version = 1.8</span><br><span class=\"line\">catalina.home = /usr/share/tomcat</span><br><span class=\"line\">sun.cpu.endian = little</span><br><span class=\"line\">sun.os.patch.level = unknown</span><br><span class=\"line\">java.awt.headless = true</span><br><span class=\"line\">java.io.tmpdir = /var/cache/tomcat/temp</span><br><span class=\"line\">java.vendor.url.bug = http://jdk.rnd.huawei.com/</span><br><span class=\"line\">server.loader = </span><br><span class=\"line\">java.rmi.server.hostname = 127.0.0.1</span><br><span class=\"line\">jna.platform.library.path = /usr/lib64:/lib64:/usr/lib:/lib:/usr/lib64/tracker-miners-2.0:/usr/lib64/tracker-2.0:/usr/lib64/dyninst:/usr/libexec/sudo:/usr/lib64/sssd:/usr/pgsql-9.6/lib:/usr/lib64/perl5/CORE:/usr/lib64/opencryptoki:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/amd64/jli:/usr/lib64/bind9-export</span><br><span class=\"line\">os.arch = amd64</span><br><span class=\"line\">java.awt.graphicsenv = sun.awt.X11GraphicsEnvironment</span><br><span class=\"line\">java.ext.dirs = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.h5.ky10.x86_64/jre/lib/ext:/usr/java/packages/lib/ext</span><br><span class=\"line\">user.dir = /usr/share/tomcat</span><br><span class=\"line\">line.separator = </span><br><span class=\"line\"></span><br><span class=\"line\">java.vm.name = OpenJDK 64-Bit Server VM</span><br><span class=\"line\">log4j.configurationFile = /etc/tomcat/log4j2.xml</span><br><span class=\"line\">file.encoding = UTF-8</span><br><span class=\"line\">com.sun.jndi.ldap.object.disableEndpointIdentification = </span><br><span class=\"line\">java.specification.version = 1.8</span><br><span class=\"line\"></span><br><span class=\"line\">VM Flags:</span><br><span class=\"line\">Non-default VM flags: -XX:CICompilerCount=4 -XX:GCLogFileSize=20971520 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialHeapSize=243269632 -XX:MaxHeapSize=1610612736 -XX:MaxNewSize=536870912 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=80740352 -XX:NumberOfGCLogFiles=15 -XX:OldSize=162529280 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseGCLogFileRotation -XX:+UseParallelGC </span><br><span class=\"line\">Command line:  -Xmx1536m -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/tomcat -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=15 -XX:GCLogFileSize=20m -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/var/log/tomcat/tomcat-gc-%t.log -Dcom.sun.jndi.ldap.object.disableEndpointIdentification -Dcatalina.base=/usr/share/tomcat -Dcatalina.home=/usr/share/tomcat -Djava.endorsed.dirs= -Djava.io.tmpdir=/var/cache/tomcat/temp -Dlog4j.configurationFile=/etc/tomcat/log4j2.xml -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-jstat\"><a href=\"#3-jstat\" class=\"headerlink\" title=\"3.jstat\"></a>3.jstat</h2><p>命令参数说明：</p>\n<ul>\n<li>generalOptions：通用选项，如果指定一个通用选项，就不能指定任何其他选项或参数。它包括如下两个选项：</li>\n<li>-help：显示帮助信息。</li>\n<li>-options：显示outputOptions参数的列表。</li>\n<li>outputOptions：输出选项，指定显示某一种Java虚拟机信息。</li>\n<li>-t：把时间戳列显示为输出的第一列。这个时间戳是从Java虚拟机的开始运行到现在的秒数。</li>\n<li>-h n：每显示n行显示一次表头，其中n为正整数。默认值为 0，即仅在第一行数据显示一次表头。</li>\n<li>vmid：虚拟机唯一ID（LVMID，Local Virtual Machine Identifier），如果查看本机就是Java进程的进程ID。</li>\n<li>interval：显示信息的时间间隔，单位默认毫秒。也可以指定秒为单位，比如：1s。如果指定了该参数，jstat命令将每隔这段时间显示一次统计信息。</li>\n<li>count：显示数据的次数，默认值是无穷大，这将导致jstat命令一直显示统计信息，直到目标JVM终止或jstat命令终止。<br>输出选项<br>如果不指定通用选项（generalOptions），则可以指定输出选项（outputOptions）。输出选项决定jstat命令显示的内容和格式，具体如下：</li>\n<li>-class：显示类加载、卸载数量、总空间和装载耗时的统计信息。</li>\n<li>-compiler：显示即时编译的方法、耗时等信息。</li>\n<li>-gc：显示堆各个区域内存使用和垃圾回收的统计信息。</li>\n<li>-gccapacity：显示堆各个区域的容量及其对应的空间的统计信息。</li>\n<li>-gcutil：显示有关垃圾收集统计信息的摘要。</li>\n<li>-gccause：显示关于垃圾收集统计信息的摘要(与-gcutil相同)，以及最近和当前垃圾回收的原因。</li>\n<li>-gcnew：显示新生代的垃圾回收统计信息。</li>\n<li>-gcnewcapacity：显示新生代的大小及其对应的空间的统计信息。</li>\n<li>-gcold: 显示老年代和元空间的垃圾回收统计信息。</li>\n<li>-gcoldcapacity：显示老年代的大小统计信息。</li>\n<li>-gcmetacapacity：显示元空间的大小的统计信息。</li>\n<li>-printcompilation：显示即时编译方法的统计信息。</li>\n</ul>\n<h1 id=\"二、线程堆栈\"><a href=\"#二、线程堆栈\" class=\"headerlink\" title=\"二、线程堆栈\"></a>二、线程堆栈</h1><h2 id=\"1-输出\"><a href=\"#1-输出\" class=\"headerlink\" title=\"1.输出\"></a>1.输出</h2><p>Java虚拟机提供了线程转储(Thread dump)的后门，通过这个后门，可以将线程堆栈打印出来。这个后门就是通过向Java进程发送一个QUIT信号，Java虚拟机收到该信号之后，将系统当前的JAVA线程调用堆栈打印出来。</p>\n<p>打印方法：</p>\n<ul>\n<li>jstack -l pid &gt; xxx.txt 需要注意的是，linux系统中往往会用不同的用户去执行不同的程序，此时可能需要通过sudu -u xxx jstack的形式</li>\n<li>kill -3<br><em><strong>同时请确保Java命令行中没有DISABLE_JAVADUMP运行选项</strong></em></li>\n</ul>\n<h2 id=\"2-线程分析\"><a href=\"#2-线程分析\" class=\"headerlink\" title=\"2.线程分析\"></a>2.线程分析</h2><p>通过输出堆栈进行分析 <code>jstack -l $(jps | grep xxx | awk &#39;&#123;print $1&#125;&#39;)</code> &gt; &#x2F;tmp&#x2F;xxx.jstack</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;SYS_STATUS_CHECKER&quot;</span> #<span class=\"number\">14</span> daemon prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f5e047bf000</span> nid=<span class=\"number\">0xe15</span> waiting on condition [<span class=\"number\">0x00007f5dd43d1000</span>]</span><br><span class=\"line\">    java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class=\"line\">        at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">ru        at com.xxx.xxx.SystemStatusChecker.run(SystemStatusChecker.java:xx)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)        </span><br><span class=\"line\">    Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br><span class=\"line\">                </span><br><span class=\"line\"><span class=\"string\">&quot;RMI Reaper&quot;</span> #<span class=\"number\">39</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f5e04e4c800</span> nid=<span class=\"number\">0xf0b</span> <span class=\"keyword\">in</span> Object.wait() [<span class=\"number\">0x00007f5dae2c4000</span>]</span><br><span class=\"line\">    java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">        at java.lang.Object.wait(Native Method)</span><br><span class=\"line\">        - waiting on &lt;<span class=\"number\">0x00000000c0c88d20</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">        at java.lang.ref.ReferenceQueue.<span class=\"built_in\">remove</span>(ReferenceQueue.java:<span class=\"number\">144</span>)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x00000000c0c88d20</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">        at java.lang.ref.ReferenceQueue.<span class=\"built_in\">remove</span>(ReferenceQueue.java:<span class=\"number\">165</span>)</span><br><span class=\"line\">        at sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\">    Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"string\">&quot;main&quot;</span> #<span class=\"number\">1</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f5e0400a000</span> nid=<span class=\"number\">0xdcb</span> runnable [<span class=\"number\">0x00007f5e0b393000</span>]</span><br><span class=\"line\">    java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at java.net.PlainSocketImpl.socketAccept(Native Method)</span><br><span class=\"line\">        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:<span class=\"number\">409</span>)</span><br><span class=\"line\">        at java.net.ServerSocket.implAccept(ServerSocket.java:<span class=\"number\">545</span>)</span><br><span class=\"line\">        at java.net.ServerSocket.accept(ServerSocket.java:<span class=\"number\">513</span>)</span><br><span class=\"line\">        at com.xxx.common.xxx.await(CommonMain.java:<span class=\"number\">244</span>)</span><br><span class=\"line\">        at com.xxx.common.xxx.startup(CommonMain.java:<span class=\"number\">207</span>)</span><br><span class=\"line\">        at com.xxx.common.xxx.main(CommonMain.java:<span class=\"number\">147</span>)</span><br><span class=\"line\">    Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br></pre></td></tr></table></figure>\n<p>在RMI线程中可以看到 “ - locked &lt;0x00000000c0c88d20&gt; (a java.lang.ref.ReferenceQueue$Lock)” 表示该线程已经使用了ID为”0x00000000c0c88d2”的锁，锁的ID由系统自动产生</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot;  prio=5     os_prio=0          tid=0x00007f5e0400a000 nid=0xdcb      runnable [0x00007f5e0b393000]</span><br><span class=\"line\">|       |          |                  |                      |              |         |</span><br><span class=\"line\">线程名称 线程优先级   操作系统级别的优先级   线程id                 对应的本地线程ID  状态      线程占用内存地址</span><br></pre></td></tr></table></figure>\n\n<p>其中”线程对应的本地线程id号”所指的”本地线程”是指该Java线程所对应的虚拟机中的本地线程。我们知道Java是解析型语言，执行的实体是Java虚拟机，因此Java语言中的线程是 依附于Java虚拟机中的本地线程来运行的，实际上是本地线程在执行Java线程代码。</p>\n<p>Java代码 中创建一个thread，虚拟机在运行期就会创建一个对应的本地线程，而这个本地线程才是真正的线程实体。为了更加深入得理解本地线程和Java线程的关系，在Unix&#x2F;Linux下，我们可以通 如下方式把Java虚拟机的本地线程打印出来：</p>\n<ul>\n<li>使用ps -ef | grep java 获得Java进程ID。</li>\n<li>使用pstack <java pid>获得Java虚拟机的本地线程的堆栈<br>其中本地线程各项含义如下：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 56 (Thread 0x7f5e0b394700 (LWP 3531))</span><br><span class=\"line\">|                 |                 |</span><br><span class=\"line\">|                 |                 +----本地线程id(另一种表示,LWP-light weight process)</span><br><span class=\"line\">|                 +-------------------本地线程id</span><br><span class=\"line\">+------------------------------线程名称</span><br></pre></td></tr></table></figure>\n而通过jstack输出的main本地线程ID为0xdcb，其10进制正好为3531。</li>\n</ul>\n<p>“runnable”表示当前线程处于运行状态。这个runnable状态是从虚拟机的角度来看的, 表示这个线程正在运行</p>\n<p><strong>⚠️ NOTE:</strong> 但是处于Runnable状态的线程不一定真的消耗CPU. 处于Runnable的线程只能说明该线程没有阻塞在java的wait或者sleep方法上，同时也没等待在锁上面。但是如果该线程调用了本地方法，而本地方法处于等待状态，这个时候虚拟机是不知道本地代码中发生 了什么（但操作系统是知道的，pstack就是操作提供的一个命令，它知道当前线程正在执行的本地代码上下文），此时尽管当前线程实际上也是阻塞的状态，但实际上显示出来的还是runnable状态， 这种情况下是不消耗CPU的</p>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 处于waittig和blocked状态的线程都不会消耗CPU </span><br><span class=\"line\">2. 线程频繁地挂起和唤醒需要消耗CPU, 而且代价颇大</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TIMED_WAITING(on object monitor) 表示当前线程被挂起一段时间,说明该线程正在 执行obj.wait(int time)方法.</li>\n<li>TIMED_WAITING(sleeping) 表示当前线程被挂起一段时间,即正在执行Thread.sleep(int time)方法. </li>\n<li>TIMED_WAITING(parking) 当前线程被挂起一段时间,即正在执行Thread.sleep(int time)方法.</li>\n<li>WAINTING(on object monitor) 当前线程被挂起，即正在执行obj.wait()方法(无参数的wait()方法).<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">处于TIMED_WAITING、WAINTING状态的线程一定不消耗CPU. 处于RUNNABLE的线程，要结合当前线程代码的性质判断，是否消耗CPU.</span><br><span class=\"line\">• 如果是纯Java运算代码，则消耗CPU.</span><br><span class=\"line\">• 如果是网络IO,很少消耗CPU.</span><br><span class=\"line\">• 如果是本地代码，结合本地代码的性质判断(可以通过pstack/gstack获取本地线程堆栈)， 如果是纯运算代码，则消耗CPU, 如果被挂起，则不消耗CPU,如果是IO,则不怎么消 耗CPU。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"三、相关的排查方法\"><a href=\"#三、相关的排查方法\" class=\"headerlink\" title=\"三、相关的排查方法\"></a>三、相关的排查方法</h1><h2 id=\"1-CPU\"><a href=\"#1-CPU\" class=\"headerlink\" title=\"1.CPU\"></a>1.CPU</h2><p>生产环境中往往会出现CPU飙高的情况，对于JAVA应用而言，此类问题相对较好确定问题方向。</p>\n<h3 id=\"1-1-使用jstack确定CPU占用高的线程\"><a href=\"#1-1-使用jstack确定CPU占用高的线程\" class=\"headerlink\" title=\"1.1 使用jstack确定CPU占用高的线程\\\"></a>1.1 使用jstack确定CPU占用高的线程\\</h3><p>通过<code>top</code>指令，可以看到进程占用的一些基础资源信息，然后“P”键可以按照CPU使用率进行排序，“M”键可以按照内存占用情况进行排序</p>\n<p>找到CPU占用高的进程pid，然后将jstack信息定向到一个文件中去，通过<code>top -Hp pid</code>查看具体的情况。</p>\n<p>通过 <code>printf &#39;%x\\n&#39; pid</code>将pid转换为16进制，然后在jstack文件中根据对应的数字进行查找，然后针对性的进行分析</p>\n<h3 id=\"1-2-频繁GC\"><a href=\"#1-2-频繁GC\" class=\"headerlink\" title=\"1.2 频繁GC\"></a>1.2 频繁GC</h3><p>有时候我们可以先确定下gc是不是太频繁，使用<code>jstat -gc pid 1000</code>命令来对gc分代变化情况进行观察，1000表示采样间隔(ms)，<code>S0C/S1C、S0U/S1U、EC/EU、OC/OU、MC/MU</code>分别代表两个Survivor区、Eden区、老年代、元数据区的容量和使用量。<code>YGC/YGT、FGC/FGCT、GCT</code>则代表YoungGc、FullGc的耗时和次数以及总耗时。如果看到gc比较频繁，再针对gc方面做进一步分析。<br><img src=\"/../images/gc.png\" alt=\"alt text\"></p>\n<h3 id=\"1-3-频繁上下文切换\"><a href=\"#1-3-频繁上下文切换\" class=\"headerlink\" title=\"1.3 频繁上下文切换\"></a>1.3 频繁上下文切换</h3><p>针对频繁上下文问题，我们可以使用vmstat命令来进行查看<br><img src=\"/../images/vmstat.png\" alt=\"alt text\"><br>cs(context switch)一列则代表了上下文切换的次数。</p>\n<p>如果我们希望对特定的pid进行监控那么可以使用 <code>pidstat -w pid</code>命令，cswch和nvcswch表示自愿及非自愿切换。</p>\n<h2 id=\"2-内存\"><a href=\"#2-内存\" class=\"headerlink\" title=\"2.内存\"></a>2.内存</h2><p>对于JAVA应用，涉及到的内存问题主要包括OOM、GC问题和堆外内存。</p>\n<h3 id=\"2-1-OOM\"><a href=\"#2-1-OOM\" class=\"headerlink\" title=\"2.1 OOM\"></a>2.1 OOM</h3><p>JVM中的内存不足，OOM大致可以分为以下几种情况</p>\n<ul>\n<li><code>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: unable to create new native thread</code> 这个意思是没有足够的内存空间给线程分配java栈，基本上还是线程池代码写的有问题，比如说忘记shutdown，所以说应该首先从代码层面来寻找问题，使用jstack或者jmap。如果一切都正常，JVM方面可以通过指定Xss来减少单个thread stack的大小。另外也可以在系统层面，可以通过修改<code>/etc/security/limits.confnofile</code>和<code>nproc</code>来增大os对线程的限制</li>\n<li><code>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space </code> 这个意思是堆的内存占用已经达到-Xmx设置的最大值，应该是最常见的OOM错误了。解决思路仍然是先应该在代码中找，怀疑存在内存泄漏，通过jstack和jmap去定位问题。如果说一切都正常，才需要通过调整Xmx的值来扩大内存。</li>\n<li><code>Caused by: java.lang.OutOfMemoryError: Meta space</code> 这个意思是元数据区的内存占用已经达到<code>XX:MaxMetaspaceSize</code>设置的最大值，排查思路和上面的一致，参数方面可以通过<code>XX:MaxPermSize</code>来进行调整</li>\n<li><code>Exception in thread &quot;main&quot; java.lang.StackOverflowError</code> 表示线程栈需要的内存大于Xss值，同样也是先进行排查，参数方面通过Xss来调整，但调整的太大可能又会引起OOM。</li>\n</ul>\n<h3 id=\"2-2-GC问题\"><a href=\"#2-2-GC问题\" class=\"headerlink\" title=\"2.2 GC问题\"></a>2.2 GC问题</h3><p>gc问题除了影响cpu也会影响内存，排查思路也是一致的。一般先使用jstat来查看分代变化情况，比如youngGC或者fullGC次数是不是太多呀；EU、OU等指标增长是不是异常等。</p>\n<p>线程的话太多而且不被及时gc也会引发oom，大部分就是之前说的<code>unable to create new native thread</code>。除了jstack细细分析dump文件外，我们一般先会看下总体线程，通过<code>pstreee -p pid |wc -l</code></p>\n<h3 id=\"2-3-堆外内存\"><a href=\"#2-3-堆外内存\" class=\"headerlink\" title=\"2.3 堆外内存\"></a>2.3 堆外内存</h3><p>JVM 的堆外内存主要包括：</p>\n<ul>\n<li>JVM 自身运行占用的空间；</li>\n<li>线程栈分配占用的系统内存；</li>\n<li>DirectByteBuffer 占用的内存；</li>\n<li>JNI 里分配的内存；</li>\n<li>Java 8 开始的元数据空间；</li>\n<li>NIO 缓存</li>\n<li>Unsafe 调用分配的内存；</li>\n<li>codecache</li>\n</ul>\n<p>冰山对象：冰山对象是指在 JVM 堆里占用的内存很小，但其实引用了一块很大的本地内存。DirectByteBuffer 和 线程都属于这类对象。</p>\n<h4 id=\"2-3-1NMT分析堆外内存\"><a href=\"#2-3-1NMT分析堆外内存\" class=\"headerlink\" title=\"2.3.1NMT分析堆外内存\"></a>2.3.1NMT分析堆外内存</h4><p>NMT（Native Memory Tracking）是 HotSpot JVM 引入的跟踪 JVM 内部使用的本地内存的一个特性，可以通过 jcmd 工具访问 NMT 数据。NMT 目前不支持跟踪第三方本地代码的内存分配和 JDK 类库。</p>\n<p>NMT 不跟踪非 JVM 代码的内存分配，本地代码里的内存泄露需要使用操作系统支持的工具来定位。</p>\n<h4 id=\"2-3-2-开启-NMT\"><a href=\"#2-3-2-开启-NMT\" class=\"headerlink\" title=\"2.3.2 开启 NMT\"></a>2.3.2 开启 NMT</h4><p>启用 NMT 会带来 5-10% 的性能损失。NMT 的内存使用率情况需要添加两个机器字 word 到 malloc 内存的 malloc 头里。NMT 内存使用率也被 NMT 跟踪。<br>启动命令： <code>-XX:NativeMemoryTracking=[off | summary | detail]</code>。</p>\n<ul>\n<li>off：NMT 默认是关闭的；</li>\n<li>summary：只收集子系统的内存使用的总计数据；</li>\n<li>detail：收集每个调用点的内存使用数据。</li>\n</ul>\n<h4 id=\"2-3-3-jcmd-访问-NMT-数据\"><a href=\"#2-3-3-jcmd-访问-NMT-数据\" class=\"headerlink\" title=\"2.3.3 jcmd 访问 NMT 数据\"></a>2.3.3 jcmd 访问 NMT 数据</h4><p>命令：<br><code>jcmd &lt;pid&gt; VM.native_memory [summary | detail | baseline | summary.diff | detail.diff | shutdown] [scale= KB | MB | GB]</code></p>\n"},{"title":"线上故障排查方法和工具介绍","_content":"\n- [写在前面](#写在前面)\n- [CPU使用率飙升](#cpu使用率飙升)\n  - [如何让CPU使用率飙升](#如何让cpu使用率飙升)\n  - [如何判断和发现CPU使用率飙升](#如何判断和发现cpu使用率飙升)\n  - [如何确定CPU飙升的根源](#如何确定cpu飙升的根源)\n    - [perf命令](#perf命令)\n    - [jstack](#jstack)\n    - [火焰图](#火焰图)\n\n\n## 写在前面\n\n在很多文章中，每当提到去解决线上问题的时候，大部分的处理方式就是登录环境，哐哐各种敲命令。操作本身没什么问题，但是对于很多人而言，我觉得这种做法其实是本末倒置的，过于在乎去快速抓住重点问题，而忽略了从全局去看问题。那么如果最开始不去操作各种命令，那应该干什么呢？\n\n***看监控！！！！***\n\n首先不要觉得这个是废话，对于很多场景来说，业务规模是不断变化的，有的时候并发超过了极限的性能，那么这种情况下都没有必要去后台进行各种查询。举个简单的例子，假如说某套业务系统，本身只能支持 500 并发，现在实际上的量到了 2000，导致线上各种内存、CPU、负载的告警，这种情况下还有必要去后台敲`top`、`free`吗？答案当然是否定的，这种情况下，就需要考虑对业务系统进行快速的扩容等。\n\n看监控的意义在于尽可能的找到更多的性能瓶颈或者异常的点，从全局出发，对系统当前存在的问题和异常点有全面的了解。\n\n监控系统多种多样，从较早的 zabbix 到现在比较流行的prometheus+grafana（举两个常用的例子），对于系统业务都有比较完善的监控，可以帮助我们更加具体的了解到系统运行全貌。如果你对这些都不喜欢，那么你自己写一个监控系统也没什么问题。\n\n当我们看完监控之后（假设你真的看了），接下来进入实际操作环节，我会从这些指标的详细含义出发，然后尽可能地将各种处理方式分享给大家。\n\n## CPU使用率飙升\n\n### 如何让CPU使用率飙升\n\n这个问题其实很简单，只要有计算任务一直存在，让 CPU 一直处于繁忙之中，那么 CPU 必然飙升。我们可以通过一系列的工具去模拟这个情况。\n\n[github SysStress](https://github.com/baixiaozhou/SysStress) 这是我自己用 golang 写的压测工具(还在开发中，可以点个 star 让我更有动力😂)\n\n使用方法:\n```\n./sysstress cpu --cpu-number 10 --duration 10m\n```\n这个就是模拟占用 10 核心的 CPU 并持续 10min，当然大家也可以用其他的压测工具，比如`stress-ng`\n\n### 如何判断和发现CPU使用率飙升\n\n首先我们先看一下，跟 CPU 使用率相关的有哪些指标。我们通过 `top` 命令就可以看到具体的信息\n\n![top](../images/top.png)\n这些输出中有一行是 `%Cpu(s)`, 这行展示了 CPU 的整体使用情况，是一个百分比的形式，我们详细阐述下这几个字段的含义\n```\nus, user    : time running un-niced user processes   未降低优先级的用户进程所占用的时间\nsy, system  : time running kernel processes          内核进程所占用的时间\nni, nice    : time running niced user processes      降低优先级的用户进程所占用的时间\nid, idle    : time spent in the kernel idle handler  空闲的时间\nwa, IO-wait : time waiting for I/O completion        等待 I/O 操作完成所花费的时间\nhi : time spent servicing hardware interrupts        处理硬件中断所花费的时间\nsi : time spent servicing software interrupts        处理软件中断所花费的时间\nst : time stolen from this vm by the hypervisor      被虚拟机管理程序从此虚拟机中窃取的时间\n```\n在这些指标中，一般关注的比较多的就是 us、sy、id、wa（其他几个指标很高的情况我个人目前基本上没有遇到过）\n\n上述指标反映了系统整体的 CPU 情况。而程序在操作系统中实际上是以一个个的进程存在的，那我们如何确定到占用 CPU 高的进程呢？让我们的目光从 top 的头部信息往下移动，下面就展示了详细的进程信息\n![top-process](../images/top-process.png)\n\n这些程序默认是按照 CPU 的使用率从高到底进行排序的，当然你也可以通过在`top`的时候输入`P`进行排序，这样我们就可以看到系统中消耗 CPU 资源的详细进程信息\n\n上面是我通过 `./sysstress cpu --cpu-number 10 --duration 10m` 压测程序跑出来的，可以看到这里的 sysstress 程序占用了 1002 的 %CPU，也就是说基本上是 10 个核心，那我们跑一个更高的，将`--cpu-number`加到 60 看看发生了什么\n![stress-cpu](../images/stress-cpu.png)\n\n我们可以看到这次%CPU打到了 6000，那很多人就好奇我日常的程序跑到多高算高呢？\n\n这里我们需要明确一点，现在的服务器绝大部分都是多核心 CPU（1C2G这种自己用来玩的忽略），CPU 的核心数决定了我们程序在同一时间能够执行多少个线程，也就是说，这个高不高是相对于机器配置而言的。如果你的机器只有 16C，那么单个进程占用的 %CPU 到 1000，那么其实已经算是比较高了。如果是 256C 的CPU（土豪级配置），那么单个进程占用的 %CPU 到 6000，对于系统的稳定性影响就没有那么大了。\n\n上述我们说的情况是进程占用 CPU 对整个系统的影响，那么进程占用的 CPU 对系统的影响不大就代表这个程序一定没有问题吗？答案显然是未必的。\n\n我们还是要回归到业务本身，如果进程的 CPU 占用在业务变动不大的情况下，发生了异常波动，或者正常情况下业务不会消耗这么高的 CPU，那么我们就需要继续排查了。\n\n### 如何确定CPU飙升的根源\n这个问题的 核心是 CPU 上在运行什么东西。 多核心CPU 下，每个核心都可以执行不同的程序，我们如何确定一个进程中那些方法在消耗 CPU 呢？从而引申下面详细的问题:\n 1. 程序的调用栈是什么样的？\n 2. 调用栈信息中哪些是需要关注的，那些是可以忽略的？\n 3. 热点函数是什么？\n\n老话说得好，\"工欲善其事，必先利其器\", 我们需要这些东西，就必须了解到什么样的工具可以拿到上面我提到的一些信息。接下来我将通过常用的后端语言：`golang` 和 `java` 为例构造一些高 CPU 的程序来进行展示。\n\n#### perf命令\n**perf是一款Linux性能分析工具。Linux性能计数器是一个新的基于内核的子系统，它提供一个性能分析框架，比如硬件（CPU、PMU(Performance Monitoring Unit)）功能和软件(软件计数器、tracepoint)功能。**\n\n安装:\n```\nyum install perf   #Centos\n```\n安装完成后，我们可以首先看下 `perf`的用法，这里不展开具体用法，只列出我平常使用的几个命令:\n```\ntop        System profiling tool.               #对系统性能进行实时分析。\nrecord     Run a command and record its profile into perf.data     #收集采样信息\nreport     Read perf.data (created by perf record) and display the profile  #分析采样信息，和record配合使用\n```\nrecord 和 report 的使用更多在于 dump 当前环境的信息用于后续分析，如果在自己环境上测试，可以用 top 进行一些简单的实时分析（类似于 top 命令）。\n\n还是用之前的压测工具，我们模拟一个 10 核心的 10min 的压测场景\n```\nnohup ./sysstress cpu --cpu-number 10 --duration 10m > /dev/null 2>&1 &\n```\n执行这个语句，让压测程序在后台执行，然后我们通过`perf top`查看具体的情况（可以通过-p 指定 pid）\n\n![perf top](../images/perftop.png)\n\n从截图的信息中我们可以看到占用资源最多的一些方法，包括 sysstress 进程的各种方法(从图片中基本上就可以确定高消耗的方法在哪里)以及底层的 `__vdso_clock_gettime`, 那再结合压测工具的代码分析下:\n\n``` golang\nfunc burnCpu(wg *sync.WaitGroup, start time.Time, durSec int64) {\n\tdefer wg.Done()\n\tfor {\n\t\t_ = 1 * 1\n\t\tnow := time.Now()\n\t\tif now.Sub(start) > time.Duration(durSec)*time.Second {\n\t\t\tbreak\n\t\t}\n\t}\n}\n```\n这是方法的核心，其实就是做无意义的计算，外加时间的判断，超过 duration 就结束。这样和上面的 perf top 信息就能对应起来。\n\n然后我们用 java 写一个同样的程序，再看看 `perf top`的情况:\n![perf top](../images/javaperftop.png)\n从这一大段显示来看，是不是看的一脸懵逼，很难发现到底是什么程序在占用CPU 资源。大家可以看一下源程序:\n``` java\nimport java.time.LocalDateTime;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n = 10;\n\n        for (int i = 0; i < 10; i++) {\n            new Thread(new Runnable() {\n                public void run() {\n                    while (true) {\n                        Math.sin(Math.random());\n                        LocalDateTime currentTime = LocalDateTime.now();\n                    }\n                }\n            }).start();\n        }\n    }\n}\n```\n这里的程序也是非常简单，启动 10 个线程，做一个无意义的数学运算，然后获取当前时间。从这段代码中是不是很难和上面`perf top`的显示关联起来？ 原因也非常简单， 像Java 这种通过 JVM 来运行的应用程序，运行堆栈用的都是 JVM 内置的函数和堆栈管理。所以，从系统层面只能看到 JVM 的函数堆栈，而不能直接得到 Java 应用程序的堆栈。那我们好能通过 perf 去看到 java 相关的堆栈吗？答案是可以的。\n\n可以借助 [perf-map-agent](https://github.com/jvm-profiling-tools/perf-map-agent) 这样的开源工具，去生成和`perf` 工具一起使用的方法映射，但是需要做额外的一些配置。这里的方法大家可以自己探究，为什么不详细的讲这个呢，原因也简单，排查问题的工具多种多样，没必要在一棵树上吊死。\n\n#### jstack\n\n既然 perf top 去查看 JAVA 的调用栈不太方便，我们就直接上 java 提供的 jstack 工具去分析。\n- jstack -l pid > xxx.txt 需要注意的是，linux系统中往往会用不同的用户去执行不同的程序，此时可能需要通过sudu -u xxx jstack的形式\n- kill -3， jstack 用不了的情况下可以使用 kill -3 pid 的形式，堆栈会输出在系统日志中。\n\n具体的操作步骤:\n1. `top -Hp $pid` 找到占用 CPU 的具体线程\n2. `jstack -l $pid > /tmp/$pid.jstack` 或者 `kill -3 $pid`将 java 进程的堆栈情况输出的日志中，然后根据 `top -Hp` 看到的线程信息在输出的堆栈日志中进行查找（`top -Hp` 输出的是 10 进制的 id，`jstack` 输出的是 16 进制的，在查找时注意进制转换）\n\n我们看下上面 java 程序的堆栈的信息:\n``` Lua\n2024-08-16 15:15:40\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.221-b11 mixed mode):\n\n\"Attach Listener\" #35 daemon prio=9 os_prio=0 tid=0x00007f52b4001000 nid=0x71f4 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"DestroyJavaVM\" #34 prio=5 os_prio=0 tid=0x00007f53e0009800 nid=0x1693 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Thread-1\" #25 prio=5 os_prio=0 tid=0x00007f53e015a800 nid=0x16d9 runnable [0x00007f52f64e3000]\n   java.lang.Thread.State: RUNNABLE\n\tat sun.misc.Unsafe.getObjectVolatile(Native Method)\n\tat java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap.java:755)\n\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:938)\n\tat java.time.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:267)\n\tat java.time.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:227)\n\tat java.time.ZoneRegion.ofId(ZoneRegion.java:120)\n\tat java.time.ZoneId.of(ZoneId.java:411)\n\tat java.time.ZoneId.of(ZoneId.java:359)\n\tat java.time.ZoneId.of(ZoneId.java:315)\n\tat java.util.TimeZone.toZoneId(TimeZone.java:556)\n\tat java.time.ZoneId.systemDefault(ZoneId.java:274)\n\tat java.time.Clock.systemDefaultZone(Clock.java:178)\n\tat java.time.LocalDateTime.now(LocalDateTime.java:180)\n\tat Main$1.run(Main.java:12)\n\tat java.lang.Thread.run(Thread.java:748)\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Thread-0\" #24 prio=5 os_prio=0 tid=0x00007f53e0159000 nid=0x16d8 runnable [0x00007f52f65e4000]\n   java.lang.Thread.State: RUNNABLE\n\tat sun.misc.Unsafe.getObjectVolatile(Native Method)\n\tat java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap.java:755)\n\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:938)\n\tat java.time.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:267)\n\tat java.time.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:227)\n\tat java.time.ZoneRegion.ofId(ZoneRegion.java:120)\n\tat java.time.ZoneId.of(ZoneId.java:411)\n\tat java.time.ZoneId.of(ZoneId.java:359)\n\tat java.time.ZoneId.of(ZoneId.java:315)\n\tat java.util.TimeZone.toZoneId(TimeZone.java:556)\n\tat java.time.ZoneId.systemDefault(ZoneId.java:274)\n\tat java.time.Clock.systemDefaultZone(Clock.java:178)\n\tat java.time.LocalDateTime.now(LocalDateTime.java:180)\n\tat Main$1.run(Main.java:12)\n\tat java.lang.Thread.run(Thread.java:748)\n\n   Locked ownable synchronizers:\n\t- None\n --- 10 个 thread\n\n\"Service Thread\" #23 daemon prio=9 os_prio=0 tid=0x00007f53e0143800 nid=0x16d6 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"C2 CompilerThread1\" #6 daemon prio=9 os_prio=0 tid=0x00007f53e010e000 nid=0x16c5 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n --- 一大堆 C2 CompilerThread\n\n\"C2 CompilerThread0\" #5 daemon prio=9 os_prio=0 tid=0x00007f53e010b000 nid=0x16c4 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Signal Dispatcher\" #4 daemon prio=9 os_prio=0 tid=0x00007f53e0109800 nid=0x16c3 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Finalizer\" #3 daemon prio=8 os_prio=0 tid=0x00007f53e00d8800 nid=0x16c2 in Object.wait() [0x00007f52f7bfa000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x000000008021a5e8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)\n\t- locked <0x000000008021a5e8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Reference Handler\" #2 daemon prio=10 os_prio=0 tid=0x00007f53e00d3800 nid=0x16c1 in Object.wait() [0x00007f52f7cfb000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x0000000080218d38> (a java.lang.ref.Reference$Lock)\n\tat java.lang.Object.wait(Object.java:502)\n\tat java.lang.ref.Reference.tryHandlePending(Reference.java:191)\n\t- locked <0x0000000080218d38> (a java.lang.ref.Reference$Lock)\n\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)\n\n   Locked ownable synchronizers:\n\t- None\n\n\"VM Thread\" os_prio=0 tid=0x00007f53e00ca000 nid=0x16c0 runnable\n\n\"GC task thread#0 (ParallelGC)\" os_prio=0 tid=0x00007f53e001f000 nid=0x1694 runnable\n\n--- 一大堆 GC task thread\n\n\"VM Periodic Task Thread\" os_prio=0 tid=0x00007f53e0146000 nid=0x16d7 waiting on condition\n\nJNI global references: 202\n```\n我们通过 top -Hp 的信息就可以快速定位到 Thread-[0-9] 这几个线程，而每个线程的调用栈都是 `java.time.LocalDateTime.now`, 也说明了这个方法在不停消耗 CPU。（但是 jstack 只能捕获短时间或者顺时的堆栈信息，没法处理长时间的，所以我们在获取时可以多打印几次或者使用其他方法）\n\n至于 jstack 的详细用法，请参考我的另一篇博客：[java问题定位](https://baixiaozhou.github.io/2024/08/13/JAVA%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/)\n\n除此之外，还有非常多的分析工具，pstack\\gstack\\strace\\gdb等等，大家可以自行探索使用\n\n#### 火焰图\n\n上面我们介绍了很多操作的命令和方法，那么有没有一种比较直观的方式能够直接看到各种方法执行的耗时比重等情况呢？火焰图就是为了解决这种情况而生的。\n\n火焰图的分类有很多，常用的包括:\n1. CPU 火焰图 (CPU Flame Graph)\n\t-\t描述：展示 CPU 在不同方法上的消耗情况，显示每个方法调用所占用的 CPU 时间。\n\t-\t用途：用于分析 CPU 性能瓶颈，识别哪些方法消耗了最多的 CPU 资源。\n\t-\t应用：Java、C++ 等多种编程语言的性能分析。\n2. 内存火焰图 (Memory Flame Graph)\n\t- 描述：展示内存分配情况，显示每个方法调用分配的内存量。\n    - 用途：用于检测内存泄漏、过度内存分配问题，帮助优化内存使用。\n\t- 应用：常用于分析内存密集型应用，如 Java 应用的堆内存分析。\n3. I/O 火焰图 (I/O Flame Graph)\n\t-\t描述：展示 I/O 操作的耗时情况，显示不同方法的 I/O 操作占用的时间。\n\t-\t用途：用于分析应用程序的 I/O 性能，识别慢速或频繁的 I/O 操作。\n\t-\t应用：数据库查询、文件系统操作、网络通信等场景的性能调优。\n\n我们这里通过 [async-profiler](https://github.com/async-profiler/async-profiler) 对文章上面的java压测程序进行抓取(这个工具只能抓 java 的)\n\n```\ntar -xzf async-profiler-3.0-linux-x64.tar.gz\ncd async-profiler-3.0-linux-x64/bin\n./asprof -d 60 pid -f /tmp/javastress.html\n```\n我们用浏览器打开生成的 html 文件，可以看到如下的火焰图信息（可以在网页进行点击，查看更细节的方法）\n![java 程序的火焰图](../images/javafire.png)\n\n这样看起来就比 jstack这些信息更加直观一点。\n\n","source":"_posts/线上问题排查方法汇总.md","raw":"---\ntitle: 线上故障排查方法和工具介绍\n---\n\n- [写在前面](#写在前面)\n- [CPU使用率飙升](#cpu使用率飙升)\n  - [如何让CPU使用率飙升](#如何让cpu使用率飙升)\n  - [如何判断和发现CPU使用率飙升](#如何判断和发现cpu使用率飙升)\n  - [如何确定CPU飙升的根源](#如何确定cpu飙升的根源)\n    - [perf命令](#perf命令)\n    - [jstack](#jstack)\n    - [火焰图](#火焰图)\n\n\n## 写在前面\n\n在很多文章中，每当提到去解决线上问题的时候，大部分的处理方式就是登录环境，哐哐各种敲命令。操作本身没什么问题，但是对于很多人而言，我觉得这种做法其实是本末倒置的，过于在乎去快速抓住重点问题，而忽略了从全局去看问题。那么如果最开始不去操作各种命令，那应该干什么呢？\n\n***看监控！！！！***\n\n首先不要觉得这个是废话，对于很多场景来说，业务规模是不断变化的，有的时候并发超过了极限的性能，那么这种情况下都没有必要去后台进行各种查询。举个简单的例子，假如说某套业务系统，本身只能支持 500 并发，现在实际上的量到了 2000，导致线上各种内存、CPU、负载的告警，这种情况下还有必要去后台敲`top`、`free`吗？答案当然是否定的，这种情况下，就需要考虑对业务系统进行快速的扩容等。\n\n看监控的意义在于尽可能的找到更多的性能瓶颈或者异常的点，从全局出发，对系统当前存在的问题和异常点有全面的了解。\n\n监控系统多种多样，从较早的 zabbix 到现在比较流行的prometheus+grafana（举两个常用的例子），对于系统业务都有比较完善的监控，可以帮助我们更加具体的了解到系统运行全貌。如果你对这些都不喜欢，那么你自己写一个监控系统也没什么问题。\n\n当我们看完监控之后（假设你真的看了），接下来进入实际操作环节，我会从这些指标的详细含义出发，然后尽可能地将各种处理方式分享给大家。\n\n## CPU使用率飙升\n\n### 如何让CPU使用率飙升\n\n这个问题其实很简单，只要有计算任务一直存在，让 CPU 一直处于繁忙之中，那么 CPU 必然飙升。我们可以通过一系列的工具去模拟这个情况。\n\n[github SysStress](https://github.com/baixiaozhou/SysStress) 这是我自己用 golang 写的压测工具(还在开发中，可以点个 star 让我更有动力😂)\n\n使用方法:\n```\n./sysstress cpu --cpu-number 10 --duration 10m\n```\n这个就是模拟占用 10 核心的 CPU 并持续 10min，当然大家也可以用其他的压测工具，比如`stress-ng`\n\n### 如何判断和发现CPU使用率飙升\n\n首先我们先看一下，跟 CPU 使用率相关的有哪些指标。我们通过 `top` 命令就可以看到具体的信息\n\n![top](../images/top.png)\n这些输出中有一行是 `%Cpu(s)`, 这行展示了 CPU 的整体使用情况，是一个百分比的形式，我们详细阐述下这几个字段的含义\n```\nus, user    : time running un-niced user processes   未降低优先级的用户进程所占用的时间\nsy, system  : time running kernel processes          内核进程所占用的时间\nni, nice    : time running niced user processes      降低优先级的用户进程所占用的时间\nid, idle    : time spent in the kernel idle handler  空闲的时间\nwa, IO-wait : time waiting for I/O completion        等待 I/O 操作完成所花费的时间\nhi : time spent servicing hardware interrupts        处理硬件中断所花费的时间\nsi : time spent servicing software interrupts        处理软件中断所花费的时间\nst : time stolen from this vm by the hypervisor      被虚拟机管理程序从此虚拟机中窃取的时间\n```\n在这些指标中，一般关注的比较多的就是 us、sy、id、wa（其他几个指标很高的情况我个人目前基本上没有遇到过）\n\n上述指标反映了系统整体的 CPU 情况。而程序在操作系统中实际上是以一个个的进程存在的，那我们如何确定到占用 CPU 高的进程呢？让我们的目光从 top 的头部信息往下移动，下面就展示了详细的进程信息\n![top-process](../images/top-process.png)\n\n这些程序默认是按照 CPU 的使用率从高到底进行排序的，当然你也可以通过在`top`的时候输入`P`进行排序，这样我们就可以看到系统中消耗 CPU 资源的详细进程信息\n\n上面是我通过 `./sysstress cpu --cpu-number 10 --duration 10m` 压测程序跑出来的，可以看到这里的 sysstress 程序占用了 1002 的 %CPU，也就是说基本上是 10 个核心，那我们跑一个更高的，将`--cpu-number`加到 60 看看发生了什么\n![stress-cpu](../images/stress-cpu.png)\n\n我们可以看到这次%CPU打到了 6000，那很多人就好奇我日常的程序跑到多高算高呢？\n\n这里我们需要明确一点，现在的服务器绝大部分都是多核心 CPU（1C2G这种自己用来玩的忽略），CPU 的核心数决定了我们程序在同一时间能够执行多少个线程，也就是说，这个高不高是相对于机器配置而言的。如果你的机器只有 16C，那么单个进程占用的 %CPU 到 1000，那么其实已经算是比较高了。如果是 256C 的CPU（土豪级配置），那么单个进程占用的 %CPU 到 6000，对于系统的稳定性影响就没有那么大了。\n\n上述我们说的情况是进程占用 CPU 对整个系统的影响，那么进程占用的 CPU 对系统的影响不大就代表这个程序一定没有问题吗？答案显然是未必的。\n\n我们还是要回归到业务本身，如果进程的 CPU 占用在业务变动不大的情况下，发生了异常波动，或者正常情况下业务不会消耗这么高的 CPU，那么我们就需要继续排查了。\n\n### 如何确定CPU飙升的根源\n这个问题的 核心是 CPU 上在运行什么东西。 多核心CPU 下，每个核心都可以执行不同的程序，我们如何确定一个进程中那些方法在消耗 CPU 呢？从而引申下面详细的问题:\n 1. 程序的调用栈是什么样的？\n 2. 调用栈信息中哪些是需要关注的，那些是可以忽略的？\n 3. 热点函数是什么？\n\n老话说得好，\"工欲善其事，必先利其器\", 我们需要这些东西，就必须了解到什么样的工具可以拿到上面我提到的一些信息。接下来我将通过常用的后端语言：`golang` 和 `java` 为例构造一些高 CPU 的程序来进行展示。\n\n#### perf命令\n**perf是一款Linux性能分析工具。Linux性能计数器是一个新的基于内核的子系统，它提供一个性能分析框架，比如硬件（CPU、PMU(Performance Monitoring Unit)）功能和软件(软件计数器、tracepoint)功能。**\n\n安装:\n```\nyum install perf   #Centos\n```\n安装完成后，我们可以首先看下 `perf`的用法，这里不展开具体用法，只列出我平常使用的几个命令:\n```\ntop        System profiling tool.               #对系统性能进行实时分析。\nrecord     Run a command and record its profile into perf.data     #收集采样信息\nreport     Read perf.data (created by perf record) and display the profile  #分析采样信息，和record配合使用\n```\nrecord 和 report 的使用更多在于 dump 当前环境的信息用于后续分析，如果在自己环境上测试，可以用 top 进行一些简单的实时分析（类似于 top 命令）。\n\n还是用之前的压测工具，我们模拟一个 10 核心的 10min 的压测场景\n```\nnohup ./sysstress cpu --cpu-number 10 --duration 10m > /dev/null 2>&1 &\n```\n执行这个语句，让压测程序在后台执行，然后我们通过`perf top`查看具体的情况（可以通过-p 指定 pid）\n\n![perf top](../images/perftop.png)\n\n从截图的信息中我们可以看到占用资源最多的一些方法，包括 sysstress 进程的各种方法(从图片中基本上就可以确定高消耗的方法在哪里)以及底层的 `__vdso_clock_gettime`, 那再结合压测工具的代码分析下:\n\n``` golang\nfunc burnCpu(wg *sync.WaitGroup, start time.Time, durSec int64) {\n\tdefer wg.Done()\n\tfor {\n\t\t_ = 1 * 1\n\t\tnow := time.Now()\n\t\tif now.Sub(start) > time.Duration(durSec)*time.Second {\n\t\t\tbreak\n\t\t}\n\t}\n}\n```\n这是方法的核心，其实就是做无意义的计算，外加时间的判断，超过 duration 就结束。这样和上面的 perf top 信息就能对应起来。\n\n然后我们用 java 写一个同样的程序，再看看 `perf top`的情况:\n![perf top](../images/javaperftop.png)\n从这一大段显示来看，是不是看的一脸懵逼，很难发现到底是什么程序在占用CPU 资源。大家可以看一下源程序:\n``` java\nimport java.time.LocalDateTime;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n = 10;\n\n        for (int i = 0; i < 10; i++) {\n            new Thread(new Runnable() {\n                public void run() {\n                    while (true) {\n                        Math.sin(Math.random());\n                        LocalDateTime currentTime = LocalDateTime.now();\n                    }\n                }\n            }).start();\n        }\n    }\n}\n```\n这里的程序也是非常简单，启动 10 个线程，做一个无意义的数学运算，然后获取当前时间。从这段代码中是不是很难和上面`perf top`的显示关联起来？ 原因也非常简单， 像Java 这种通过 JVM 来运行的应用程序，运行堆栈用的都是 JVM 内置的函数和堆栈管理。所以，从系统层面只能看到 JVM 的函数堆栈，而不能直接得到 Java 应用程序的堆栈。那我们好能通过 perf 去看到 java 相关的堆栈吗？答案是可以的。\n\n可以借助 [perf-map-agent](https://github.com/jvm-profiling-tools/perf-map-agent) 这样的开源工具，去生成和`perf` 工具一起使用的方法映射，但是需要做额外的一些配置。这里的方法大家可以自己探究，为什么不详细的讲这个呢，原因也简单，排查问题的工具多种多样，没必要在一棵树上吊死。\n\n#### jstack\n\n既然 perf top 去查看 JAVA 的调用栈不太方便，我们就直接上 java 提供的 jstack 工具去分析。\n- jstack -l pid > xxx.txt 需要注意的是，linux系统中往往会用不同的用户去执行不同的程序，此时可能需要通过sudu -u xxx jstack的形式\n- kill -3， jstack 用不了的情况下可以使用 kill -3 pid 的形式，堆栈会输出在系统日志中。\n\n具体的操作步骤:\n1. `top -Hp $pid` 找到占用 CPU 的具体线程\n2. `jstack -l $pid > /tmp/$pid.jstack` 或者 `kill -3 $pid`将 java 进程的堆栈情况输出的日志中，然后根据 `top -Hp` 看到的线程信息在输出的堆栈日志中进行查找（`top -Hp` 输出的是 10 进制的 id，`jstack` 输出的是 16 进制的，在查找时注意进制转换）\n\n我们看下上面 java 程序的堆栈的信息:\n``` Lua\n2024-08-16 15:15:40\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.221-b11 mixed mode):\n\n\"Attach Listener\" #35 daemon prio=9 os_prio=0 tid=0x00007f52b4001000 nid=0x71f4 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"DestroyJavaVM\" #34 prio=5 os_prio=0 tid=0x00007f53e0009800 nid=0x1693 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Thread-1\" #25 prio=5 os_prio=0 tid=0x00007f53e015a800 nid=0x16d9 runnable [0x00007f52f64e3000]\n   java.lang.Thread.State: RUNNABLE\n\tat sun.misc.Unsafe.getObjectVolatile(Native Method)\n\tat java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap.java:755)\n\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:938)\n\tat java.time.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:267)\n\tat java.time.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:227)\n\tat java.time.ZoneRegion.ofId(ZoneRegion.java:120)\n\tat java.time.ZoneId.of(ZoneId.java:411)\n\tat java.time.ZoneId.of(ZoneId.java:359)\n\tat java.time.ZoneId.of(ZoneId.java:315)\n\tat java.util.TimeZone.toZoneId(TimeZone.java:556)\n\tat java.time.ZoneId.systemDefault(ZoneId.java:274)\n\tat java.time.Clock.systemDefaultZone(Clock.java:178)\n\tat java.time.LocalDateTime.now(LocalDateTime.java:180)\n\tat Main$1.run(Main.java:12)\n\tat java.lang.Thread.run(Thread.java:748)\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Thread-0\" #24 prio=5 os_prio=0 tid=0x00007f53e0159000 nid=0x16d8 runnable [0x00007f52f65e4000]\n   java.lang.Thread.State: RUNNABLE\n\tat sun.misc.Unsafe.getObjectVolatile(Native Method)\n\tat java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap.java:755)\n\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:938)\n\tat java.time.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:267)\n\tat java.time.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:227)\n\tat java.time.ZoneRegion.ofId(ZoneRegion.java:120)\n\tat java.time.ZoneId.of(ZoneId.java:411)\n\tat java.time.ZoneId.of(ZoneId.java:359)\n\tat java.time.ZoneId.of(ZoneId.java:315)\n\tat java.util.TimeZone.toZoneId(TimeZone.java:556)\n\tat java.time.ZoneId.systemDefault(ZoneId.java:274)\n\tat java.time.Clock.systemDefaultZone(Clock.java:178)\n\tat java.time.LocalDateTime.now(LocalDateTime.java:180)\n\tat Main$1.run(Main.java:12)\n\tat java.lang.Thread.run(Thread.java:748)\n\n   Locked ownable synchronizers:\n\t- None\n --- 10 个 thread\n\n\"Service Thread\" #23 daemon prio=9 os_prio=0 tid=0x00007f53e0143800 nid=0x16d6 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"C2 CompilerThread1\" #6 daemon prio=9 os_prio=0 tid=0x00007f53e010e000 nid=0x16c5 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n --- 一大堆 C2 CompilerThread\n\n\"C2 CompilerThread0\" #5 daemon prio=9 os_prio=0 tid=0x00007f53e010b000 nid=0x16c4 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Signal Dispatcher\" #4 daemon prio=9 os_prio=0 tid=0x00007f53e0109800 nid=0x16c3 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Finalizer\" #3 daemon prio=8 os_prio=0 tid=0x00007f53e00d8800 nid=0x16c2 in Object.wait() [0x00007f52f7bfa000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x000000008021a5e8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)\n\t- locked <0x000000008021a5e8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)\n\n   Locked ownable synchronizers:\n\t- None\n\n\"Reference Handler\" #2 daemon prio=10 os_prio=0 tid=0x00007f53e00d3800 nid=0x16c1 in Object.wait() [0x00007f52f7cfb000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x0000000080218d38> (a java.lang.ref.Reference$Lock)\n\tat java.lang.Object.wait(Object.java:502)\n\tat java.lang.ref.Reference.tryHandlePending(Reference.java:191)\n\t- locked <0x0000000080218d38> (a java.lang.ref.Reference$Lock)\n\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)\n\n   Locked ownable synchronizers:\n\t- None\n\n\"VM Thread\" os_prio=0 tid=0x00007f53e00ca000 nid=0x16c0 runnable\n\n\"GC task thread#0 (ParallelGC)\" os_prio=0 tid=0x00007f53e001f000 nid=0x1694 runnable\n\n--- 一大堆 GC task thread\n\n\"VM Periodic Task Thread\" os_prio=0 tid=0x00007f53e0146000 nid=0x16d7 waiting on condition\n\nJNI global references: 202\n```\n我们通过 top -Hp 的信息就可以快速定位到 Thread-[0-9] 这几个线程，而每个线程的调用栈都是 `java.time.LocalDateTime.now`, 也说明了这个方法在不停消耗 CPU。（但是 jstack 只能捕获短时间或者顺时的堆栈信息，没法处理长时间的，所以我们在获取时可以多打印几次或者使用其他方法）\n\n至于 jstack 的详细用法，请参考我的另一篇博客：[java问题定位](https://baixiaozhou.github.io/2024/08/13/JAVA%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/)\n\n除此之外，还有非常多的分析工具，pstack\\gstack\\strace\\gdb等等，大家可以自行探索使用\n\n#### 火焰图\n\n上面我们介绍了很多操作的命令和方法，那么有没有一种比较直观的方式能够直接看到各种方法执行的耗时比重等情况呢？火焰图就是为了解决这种情况而生的。\n\n火焰图的分类有很多，常用的包括:\n1. CPU 火焰图 (CPU Flame Graph)\n\t-\t描述：展示 CPU 在不同方法上的消耗情况，显示每个方法调用所占用的 CPU 时间。\n\t-\t用途：用于分析 CPU 性能瓶颈，识别哪些方法消耗了最多的 CPU 资源。\n\t-\t应用：Java、C++ 等多种编程语言的性能分析。\n2. 内存火焰图 (Memory Flame Graph)\n\t- 描述：展示内存分配情况，显示每个方法调用分配的内存量。\n    - 用途：用于检测内存泄漏、过度内存分配问题，帮助优化内存使用。\n\t- 应用：常用于分析内存密集型应用，如 Java 应用的堆内存分析。\n3. I/O 火焰图 (I/O Flame Graph)\n\t-\t描述：展示 I/O 操作的耗时情况，显示不同方法的 I/O 操作占用的时间。\n\t-\t用途：用于分析应用程序的 I/O 性能，识别慢速或频繁的 I/O 操作。\n\t-\t应用：数据库查询、文件系统操作、网络通信等场景的性能调优。\n\n我们这里通过 [async-profiler](https://github.com/async-profiler/async-profiler) 对文章上面的java压测程序进行抓取(这个工具只能抓 java 的)\n\n```\ntar -xzf async-profiler-3.0-linux-x64.tar.gz\ncd async-profiler-3.0-linux-x64/bin\n./asprof -d 60 pid -f /tmp/javastress.html\n```\n我们用浏览器打开生成的 html 文件，可以看到如下的火焰图信息（可以在网页进行点击，查看更细节的方法）\n![java 程序的火焰图](../images/javafire.png)\n\n这样看起来就比 jstack这些信息更加直观一点。\n\n","slug":"线上问题排查方法汇总","published":1,"date":"2024-08-14T12:01:02.522Z","updated":"2024-08-16T09:24:13.168Z","_id":"clzv87lva0000c3onbyvc4ecf","comments":1,"layout":"post","photos":[],"content":"<ul>\n<li><a href=\"#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2\">写在前面</a></li>\n<li><a href=\"#cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E9%A3%99%E5%8D%87\">CPU使用率飙升</a><ul>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E8%AE%A9cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E9%A3%99%E5%8D%87\">如何让CPU使用率飙升</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%92%8C%E5%8F%91%E7%8E%B0cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E9%A3%99%E5%8D%87\">如何判断和发现CPU使用率飙升</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9Acpu%E9%A3%99%E5%8D%87%E7%9A%84%E6%A0%B9%E6%BA%90\">如何确定CPU飙升的根源</a><ul>\n<li><a href=\"#perf%E5%91%BD%E4%BB%A4\">perf命令</a></li>\n<li><a href=\"#jstack\">jstack</a></li>\n<li><a href=\"#%E7%81%AB%E7%84%B0%E5%9B%BE\">火焰图</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>在很多文章中，每当提到去解决线上问题的时候，大部分的处理方式就是登录环境，哐哐各种敲命令。操作本身没什么问题，但是对于很多人而言，我觉得这种做法其实是本末倒置的，过于在乎去快速抓住重点问题，而忽略了从全局去看问题。那么如果最开始不去操作各种命令，那应该干什么呢？</p>\n<p><em><strong>看监控！！！！</strong></em></p>\n<p>首先不要觉得这个是废话，对于很多场景来说，业务规模是不断变化的，有的时候并发超过了极限的性能，那么这种情况下都没有必要去后台进行各种查询。举个简单的例子，假如说某套业务系统，本身只能支持 500 并发，现在实际上的量到了 2000，导致线上各种内存、CPU、负载的告警，这种情况下还有必要去后台敲<code>top</code>、<code>free</code>吗？答案当然是否定的，这种情况下，就需要考虑对业务系统进行快速的扩容等。</p>\n<p>看监控的意义在于尽可能的找到更多的性能瓶颈或者异常的点，从全局出发，对系统当前存在的问题和异常点有全面的了解。</p>\n<p>监控系统多种多样，从较早的 zabbix 到现在比较流行的prometheus+grafana（举两个常用的例子），对于系统业务都有比较完善的监控，可以帮助我们更加具体的了解到系统运行全貌。如果你对这些都不喜欢，那么你自己写一个监控系统也没什么问题。</p>\n<p>当我们看完监控之后（假设你真的看了），接下来进入实际操作环节，我会从这些指标的详细含义出发，然后尽可能地将各种处理方式分享给大家。</p>\n<h2 id=\"CPU使用率飙升\"><a href=\"#CPU使用率飙升\" class=\"headerlink\" title=\"CPU使用率飙升\"></a>CPU使用率飙升</h2><h3 id=\"如何让CPU使用率飙升\"><a href=\"#如何让CPU使用率飙升\" class=\"headerlink\" title=\"如何让CPU使用率飙升\"></a>如何让CPU使用率飙升</h3><p>这个问题其实很简单，只要有计算任务一直存在，让 CPU 一直处于繁忙之中，那么 CPU 必然飙升。我们可以通过一系列的工具去模拟这个情况。</p>\n<p><a href=\"https://github.com/baixiaozhou/SysStress\">github SysStress</a> 这是我自己用 golang 写的压测工具(还在开发中，可以点个 star 让我更有动力😂)</p>\n<p>使用方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sysstress cpu --cpu-number 10 --duration 10m</span><br></pre></td></tr></table></figure>\n<p>这个就是模拟占用 10 核心的 CPU 并持续 10min，当然大家也可以用其他的压测工具，比如<code>stress-ng</code></p>\n<h3 id=\"如何判断和发现CPU使用率飙升\"><a href=\"#如何判断和发现CPU使用率飙升\" class=\"headerlink\" title=\"如何判断和发现CPU使用率飙升\"></a>如何判断和发现CPU使用率飙升</h3><p>首先我们先看一下，跟 CPU 使用率相关的有哪些指标。我们通过 <code>top</code> 命令就可以看到具体的信息</p>\n<p><img src=\"/../images/top.png\" alt=\"top\"><br>这些输出中有一行是 <code>%Cpu(s)</code>, 这行展示了 CPU 的整体使用情况，是一个百分比的形式，我们详细阐述下这几个字段的含义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">us, user    : time running un-niced user processes   未降低优先级的用户进程所占用的时间</span><br><span class=\"line\">sy, system  : time running kernel processes          内核进程所占用的时间</span><br><span class=\"line\">ni, nice    : time running niced user processes      降低优先级的用户进程所占用的时间</span><br><span class=\"line\">id, idle    : time spent in the kernel idle handler  空闲的时间</span><br><span class=\"line\">wa, IO-wait : time waiting for I/O completion        等待 I/O 操作完成所花费的时间</span><br><span class=\"line\">hi : time spent servicing hardware interrupts        处理硬件中断所花费的时间</span><br><span class=\"line\">si : time spent servicing software interrupts        处理软件中断所花费的时间</span><br><span class=\"line\">st : time stolen from this vm by the hypervisor      被虚拟机管理程序从此虚拟机中窃取的时间</span><br></pre></td></tr></table></figure>\n<p>在这些指标中，一般关注的比较多的就是 us、sy、id、wa（其他几个指标很高的情况我个人目前基本上没有遇到过）</p>\n<p>上述指标反映了系统整体的 CPU 情况。而程序在操作系统中实际上是以一个个的进程存在的，那我们如何确定到占用 CPU 高的进程呢？让我们的目光从 top 的头部信息往下移动，下面就展示了详细的进程信息<br><img src=\"/../images/top-process.png\" alt=\"top-process\"></p>\n<p>这些程序默认是按照 CPU 的使用率从高到底进行排序的，当然你也可以通过在<code>top</code>的时候输入<code>P</code>进行排序，这样我们就可以看到系统中消耗 CPU 资源的详细进程信息</p>\n<p>上面是我通过 <code>./sysstress cpu --cpu-number 10 --duration 10m</code> 压测程序跑出来的，可以看到这里的 sysstress 程序占用了 1002 的 %CPU，也就是说基本上是 10 个核心，那我们跑一个更高的，将<code>--cpu-number</code>加到 60 看看发生了什么<br><img src=\"/../images/stress-cpu.png\" alt=\"stress-cpu\"></p>\n<p>我们可以看到这次%CPU打到了 6000，那很多人就好奇我日常的程序跑到多高算高呢？</p>\n<p>这里我们需要明确一点，现在的服务器绝大部分都是多核心 CPU（1C2G这种自己用来玩的忽略），CPU 的核心数决定了我们程序在同一时间能够执行多少个线程，也就是说，这个高不高是相对于机器配置而言的。如果你的机器只有 16C，那么单个进程占用的 %CPU 到 1000，那么其实已经算是比较高了。如果是 256C 的CPU（土豪级配置），那么单个进程占用的 %CPU 到 6000，对于系统的稳定性影响就没有那么大了。</p>\n<p>上述我们说的情况是进程占用 CPU 对整个系统的影响，那么进程占用的 CPU 对系统的影响不大就代表这个程序一定没有问题吗？答案显然是未必的。</p>\n<p>我们还是要回归到业务本身，如果进程的 CPU 占用在业务变动不大的情况下，发生了异常波动，或者正常情况下业务不会消耗这么高的 CPU，那么我们就需要继续排查了。</p>\n<h3 id=\"如何确定CPU飙升的根源\"><a href=\"#如何确定CPU飙升的根源\" class=\"headerlink\" title=\"如何确定CPU飙升的根源\"></a>如何确定CPU飙升的根源</h3><p>这个问题的 核心是 CPU 上在运行什么东西。 多核心CPU 下，每个核心都可以执行不同的程序，我们如何确定一个进程中那些方法在消耗 CPU 呢？从而引申下面详细的问题:</p>\n<ol>\n<li>程序的调用栈是什么样的？</li>\n<li>调用栈信息中哪些是需要关注的，那些是可以忽略的？</li>\n<li>热点函数是什么？</li>\n</ol>\n<p>老话说得好，”工欲善其事，必先利其器”, 我们需要这些东西，就必须了解到什么样的工具可以拿到上面我提到的一些信息。接下来我将通过常用的后端语言：<code>golang</code> 和 <code>java</code> 为例构造一些高 CPU 的程序来进行展示。</p>\n<h4 id=\"perf命令\"><a href=\"#perf命令\" class=\"headerlink\" title=\"perf命令\"></a>perf命令</h4><p><strong>perf是一款Linux性能分析工具。Linux性能计数器是一个新的基于内核的子系统，它提供一个性能分析框架，比如硬件（CPU、PMU(Performance Monitoring Unit)）功能和软件(软件计数器、tracepoint)功能。</strong></p>\n<p>安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install perf   #Centos</span><br></pre></td></tr></table></figure>\n<p>安装完成后，我们可以首先看下 <code>perf</code>的用法，这里不展开具体用法，只列出我平常使用的几个命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top        System profiling tool.               #对系统性能进行实时分析。</span><br><span class=\"line\">record     Run a command and record its profile into perf.data     #收集采样信息</span><br><span class=\"line\">report     Read perf.data (created by perf record) and display the profile  #分析采样信息，和record配合使用</span><br></pre></td></tr></table></figure>\n<p>record 和 report 的使用更多在于 dump 当前环境的信息用于后续分析，如果在自己环境上测试，可以用 top 进行一些简单的实时分析（类似于 top 命令）。</p>\n<p>还是用之前的压测工具，我们模拟一个 10 核心的 10min 的压测场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ./sysstress cpu --cpu-number 10 --duration 10m &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p>执行这个语句，让压测程序在后台执行，然后我们通过<code>perf top</code>查看具体的情况（可以通过-p 指定 pid）</p>\n<p><img src=\"/../images/perftop.png\" alt=\"perf top\"></p>\n<p>从截图的信息中我们可以看到占用资源最多的一些方法，包括 sysstress 进程的各种方法(从图片中基本上就可以确定高消耗的方法在哪里)以及底层的 <code>__vdso_clock_gettime</code>, 那再结合压测工具的代码分析下:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">burnCpu</span><span class=\"params\">(wg *sync.WaitGroup, start time.Time, durSec <span class=\"type\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t_ = <span class=\"number\">1</span> * <span class=\"number\">1</span></span><br><span class=\"line\">\t\tnow := time.Now()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> now.Sub(start) &gt; time.Duration(durSec)*time.Second &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是方法的核心，其实就是做无意义的计算，外加时间的判断，超过 duration 就结束。这样和上面的 perf top 信息就能对应起来。</p>\n<p>然后我们用 java 写一个同样的程序，再看看 <code>perf top</code>的情况:<br><img src=\"/../images/javaperftop.png\" alt=\"perf top\"><br>从这一大段显示来看，是不是看的一脸懵逼，很难发现到底是什么程序在占用CPU 资源。大家可以看一下源程序:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                        Math.sin(Math.random());</span><br><span class=\"line\">                        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">currentTime</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的程序也是非常简单，启动 10 个线程，做一个无意义的数学运算，然后获取当前时间。从这段代码中是不是很难和上面<code>perf top</code>的显示关联起来？ 原因也非常简单， 像Java 这种通过 JVM 来运行的应用程序，运行堆栈用的都是 JVM 内置的函数和堆栈管理。所以，从系统层面只能看到 JVM 的函数堆栈，而不能直接得到 Java 应用程序的堆栈。那我们好能通过 perf 去看到 java 相关的堆栈吗？答案是可以的。</p>\n<p>可以借助 <a href=\"https://github.com/jvm-profiling-tools/perf-map-agent\">perf-map-agent</a> 这样的开源工具，去生成和<code>perf</code> 工具一起使用的方法映射，但是需要做额外的一些配置。这里的方法大家可以自己探究，为什么不详细的讲这个呢，原因也简单，排查问题的工具多种多样，没必要在一棵树上吊死。</p>\n<h4 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h4><p>既然 perf top 去查看 JAVA 的调用栈不太方便，我们就直接上 java 提供的 jstack 工具去分析。</p>\n<ul>\n<li>jstack -l pid &gt; xxx.txt 需要注意的是，linux系统中往往会用不同的用户去执行不同的程序，此时可能需要通过sudu -u xxx jstack的形式</li>\n<li>kill -3， jstack 用不了的情况下可以使用 kill -3 pid 的形式，堆栈会输出在系统日志中。</li>\n</ul>\n<p>具体的操作步骤:</p>\n<ol>\n<li><code>top -Hp $pid</code> 找到占用 CPU 的具体线程</li>\n<li><code>jstack -l $pid &gt; /tmp/$pid.jstack</code> 或者 <code>kill -3 $pid</code>将 java 进程的堆栈情况输出的日志中，然后根据 <code>top -Hp</code> 看到的线程信息在输出的堆栈日志中进行查找（<code>top -Hp</code> 输出的是 10 进制的 id，<code>jstack</code> 输出的是 16 进制的，在查找时注意进制转换）</li>\n</ol>\n<p>我们看下上面 java 程序的堆栈的信息:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2024</span><span class=\"number\">-08</span><span class=\"number\">-16</span> <span class=\"number\">15</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span></span><br><span class=\"line\">Full thread <span class=\"built_in\">dump</span> Java HotSpot(TM) <span class=\"number\">64</span>-Bit Server VM (<span class=\"number\">25.221</span>-b11 mixed mode):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Attach Listener&quot;</span> #<span class=\"number\">35</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f52b4001000</span> nid=<span class=\"number\">0x71f4</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;DestroyJavaVM&quot;</span> #<span class=\"number\">34</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0009800</span> nid=<span class=\"number\">0x1693</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Thread-1&quot;</span> #<span class=\"number\">25</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e015a800</span> nid=<span class=\"number\">0x16d9</span> runnable [<span class=\"number\">0x00007f52f64e3000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">\tat sun.misc.Unsafe.getObjectVolatile(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap.java:<span class=\"number\">755</span>)</span><br><span class=\"line\">\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:<span class=\"number\">938</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:<span class=\"number\">267</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:<span class=\"number\">227</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneRegion.ofId(ZoneRegion.java:<span class=\"number\">120</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">411</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">315</span>)</span><br><span class=\"line\">\tat java.util.TimeZone.toZoneId(TimeZone.java:<span class=\"number\">556</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.systemDefault(ZoneId.java:<span class=\"number\">274</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.Clock.systemDefaultZone(Clock.java:<span class=\"number\">178</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.LocalDateTime.now(LocalDateTime.java:<span class=\"number\">180</span>)</span><br><span class=\"line\">\tat Main$<span class=\"number\">1.</span>run(Main.java:<span class=\"number\">12</span>)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Thread-0&quot;</span> #<span class=\"number\">24</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0159000</span> nid=<span class=\"number\">0x16d8</span> runnable [<span class=\"number\">0x00007f52f65e4000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">\tat sun.misc.Unsafe.getObjectVolatile(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap.java:<span class=\"number\">755</span>)</span><br><span class=\"line\">\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:<span class=\"number\">938</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:<span class=\"number\">267</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:<span class=\"number\">227</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneRegion.ofId(ZoneRegion.java:<span class=\"number\">120</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">411</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">315</span>)</span><br><span class=\"line\">\tat java.util.TimeZone.toZoneId(TimeZone.java:<span class=\"number\">556</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.systemDefault(ZoneId.java:<span class=\"number\">274</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.Clock.systemDefaultZone(Clock.java:<span class=\"number\">178</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.LocalDateTime.now(LocalDateTime.java:<span class=\"number\">180</span>)</span><br><span class=\"line\">\tat Main$<span class=\"number\">1.</span>run(Main.java:<span class=\"number\">12</span>)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"> <span class=\"comment\">--- 10 个 thread</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Service Thread&quot;</span> #<span class=\"number\">23</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0143800</span> nid=<span class=\"number\">0x16d6</span> runnable [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;C2 CompilerThread1&quot;</span> #<span class=\"number\">6</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e010e000</span> nid=<span class=\"number\">0x16c5</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"> <span class=\"comment\">--- 一大堆 C2 CompilerThread</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;C2 CompilerThread0&quot;</span> #<span class=\"number\">5</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e010b000</span> nid=<span class=\"number\">0x16c4</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Signal Dispatcher&quot;</span> #<span class=\"number\">4</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0109800</span> nid=<span class=\"number\">0x16c3</span> runnable [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Finalizer&quot;</span> #<span class=\"number\">3</span> daemon prio=<span class=\"number\">8</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e00d8800</span> nid=<span class=\"number\">0x16c2</span> <span class=\"keyword\">in</span> Object.wait() [<span class=\"number\">0x00007f52f7bfa000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;<span class=\"number\">0x000000008021a5e8</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">\tat java.lang.ref.ReferenceQueue.<span class=\"built_in\">remove</span>(ReferenceQueue.java:<span class=\"number\">144</span>)</span><br><span class=\"line\">\t- locked &lt;<span class=\"number\">0x000000008021a5e8</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">\tat java.lang.ref.ReferenceQueue.<span class=\"built_in\">remove</span>(ReferenceQueue.java:<span class=\"number\">165</span>)</span><br><span class=\"line\">\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:<span class=\"number\">216</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Reference Handler&quot;</span> #<span class=\"number\">2</span> daemon prio=<span class=\"number\">10</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e00d3800</span> nid=<span class=\"number\">0x16c1</span> <span class=\"keyword\">in</span> Object.wait() [<span class=\"number\">0x00007f52f7cfb000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;<span class=\"number\">0x0000000080218d38</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class=\"line\">\tat java.lang.Object.wait(Object.java:<span class=\"number\">502</span>)</span><br><span class=\"line\">\tat java.lang.ref.Reference.tryHandlePending(Reference.java:<span class=\"number\">191</span>)</span><br><span class=\"line\">\t- locked &lt;<span class=\"number\">0x0000000080218d38</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class=\"line\">\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:<span class=\"number\">153</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;VM Thread&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e00ca000</span> nid=<span class=\"number\">0x16c0</span> runnable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;GC task thread#0 (ParallelGC)&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e001f000</span> nid=<span class=\"number\">0x1694</span> runnable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 一大堆 GC task thread</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;VM Periodic Task Thread&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0146000</span> nid=<span class=\"number\">0x16d7</span> waiting on condition</span><br><span class=\"line\"></span><br><span class=\"line\">JNI global references: <span class=\"number\">202</span></span><br></pre></td></tr></table></figure>\n<p>我们通过 top -Hp 的信息就可以快速定位到 Thread-[0-9] 这几个线程，而每个线程的调用栈都是 <code>java.time.LocalDateTime.now</code>, 也说明了这个方法在不停消耗 CPU。（但是 jstack 只能捕获短时间或者顺时的堆栈信息，没法处理长时间的，所以我们在获取时可以多打印几次或者使用其他方法）</p>\n<p>至于 jstack 的详细用法，请参考我的另一篇博客：<a href=\"https://baixiaozhou.github.io/2024/08/13/JAVA%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/\">java问题定位</a></p>\n<p>除此之外，还有非常多的分析工具，pstack\\gstack\\strace\\gdb等等，大家可以自行探索使用</p>\n<h4 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h4><p>上面我们介绍了很多操作的命令和方法，那么有没有一种比较直观的方式能够直接看到各种方法执行的耗时比重等情况呢？火焰图就是为了解决这种情况而生的。</p>\n<p>火焰图的分类有很多，常用的包括:</p>\n<ol>\n<li>CPU 火焰图 (CPU Flame Graph)<ul>\n<li>   描述：展示 CPU 在不同方法上的消耗情况，显示每个方法调用所占用的 CPU 时间。</li>\n<li>   用途：用于分析 CPU 性能瓶颈，识别哪些方法消耗了最多的 CPU 资源。</li>\n<li>   应用：Java、C++ 等多种编程语言的性能分析。</li>\n</ul>\n</li>\n<li>内存火焰图 (Memory Flame Graph)<ul>\n<li>描述：展示内存分配情况，显示每个方法调用分配的内存量。</li>\n<li>用途：用于检测内存泄漏、过度内存分配问题，帮助优化内存使用。</li>\n<li>应用：常用于分析内存密集型应用，如 Java 应用的堆内存分析。</li>\n</ul>\n</li>\n<li>I&#x2F;O 火焰图 (I&#x2F;O Flame Graph)<ul>\n<li>   描述：展示 I&#x2F;O 操作的耗时情况，显示不同方法的 I&#x2F;O 操作占用的时间。</li>\n<li>   用途：用于分析应用程序的 I&#x2F;O 性能，识别慢速或频繁的 I&#x2F;O 操作。</li>\n<li>   应用：数据库查询、文件系统操作、网络通信等场景的性能调优。</li>\n</ul>\n</li>\n</ol>\n<p>我们这里通过 <a href=\"https://github.com/async-profiler/async-profiler\">async-profiler</a> 对文章上面的java压测程序进行抓取(这个工具只能抓 java 的)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzf async-profiler-3.0-linux-x64.tar.gz</span><br><span class=\"line\">cd async-profiler-3.0-linux-x64/bin</span><br><span class=\"line\">./asprof -d 60 pid -f /tmp/javastress.html</span><br></pre></td></tr></table></figure>\n<p>我们用浏览器打开生成的 html 文件，可以看到如下的火焰图信息（可以在网页进行点击，查看更细节的方法）<br><img src=\"/../images/javafire.png\" alt=\"java 程序的火焰图\"></p>\n<p>这样看起来就比 jstack这些信息更加直观一点。</p>\n","excerpt":"","more":"<ul>\n<li><a href=\"#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2\">写在前面</a></li>\n<li><a href=\"#cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E9%A3%99%E5%8D%87\">CPU使用率飙升</a><ul>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E8%AE%A9cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E9%A3%99%E5%8D%87\">如何让CPU使用率飙升</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%92%8C%E5%8F%91%E7%8E%B0cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E9%A3%99%E5%8D%87\">如何判断和发现CPU使用率飙升</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9Acpu%E9%A3%99%E5%8D%87%E7%9A%84%E6%A0%B9%E6%BA%90\">如何确定CPU飙升的根源</a><ul>\n<li><a href=\"#perf%E5%91%BD%E4%BB%A4\">perf命令</a></li>\n<li><a href=\"#jstack\">jstack</a></li>\n<li><a href=\"#%E7%81%AB%E7%84%B0%E5%9B%BE\">火焰图</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>在很多文章中，每当提到去解决线上问题的时候，大部分的处理方式就是登录环境，哐哐各种敲命令。操作本身没什么问题，但是对于很多人而言，我觉得这种做法其实是本末倒置的，过于在乎去快速抓住重点问题，而忽略了从全局去看问题。那么如果最开始不去操作各种命令，那应该干什么呢？</p>\n<p><em><strong>看监控！！！！</strong></em></p>\n<p>首先不要觉得这个是废话，对于很多场景来说，业务规模是不断变化的，有的时候并发超过了极限的性能，那么这种情况下都没有必要去后台进行各种查询。举个简单的例子，假如说某套业务系统，本身只能支持 500 并发，现在实际上的量到了 2000，导致线上各种内存、CPU、负载的告警，这种情况下还有必要去后台敲<code>top</code>、<code>free</code>吗？答案当然是否定的，这种情况下，就需要考虑对业务系统进行快速的扩容等。</p>\n<p>看监控的意义在于尽可能的找到更多的性能瓶颈或者异常的点，从全局出发，对系统当前存在的问题和异常点有全面的了解。</p>\n<p>监控系统多种多样，从较早的 zabbix 到现在比较流行的prometheus+grafana（举两个常用的例子），对于系统业务都有比较完善的监控，可以帮助我们更加具体的了解到系统运行全貌。如果你对这些都不喜欢，那么你自己写一个监控系统也没什么问题。</p>\n<p>当我们看完监控之后（假设你真的看了），接下来进入实际操作环节，我会从这些指标的详细含义出发，然后尽可能地将各种处理方式分享给大家。</p>\n<h2 id=\"CPU使用率飙升\"><a href=\"#CPU使用率飙升\" class=\"headerlink\" title=\"CPU使用率飙升\"></a>CPU使用率飙升</h2><h3 id=\"如何让CPU使用率飙升\"><a href=\"#如何让CPU使用率飙升\" class=\"headerlink\" title=\"如何让CPU使用率飙升\"></a>如何让CPU使用率飙升</h3><p>这个问题其实很简单，只要有计算任务一直存在，让 CPU 一直处于繁忙之中，那么 CPU 必然飙升。我们可以通过一系列的工具去模拟这个情况。</p>\n<p><a href=\"https://github.com/baixiaozhou/SysStress\">github SysStress</a> 这是我自己用 golang 写的压测工具(还在开发中，可以点个 star 让我更有动力😂)</p>\n<p>使用方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sysstress cpu --cpu-number 10 --duration 10m</span><br></pre></td></tr></table></figure>\n<p>这个就是模拟占用 10 核心的 CPU 并持续 10min，当然大家也可以用其他的压测工具，比如<code>stress-ng</code></p>\n<h3 id=\"如何判断和发现CPU使用率飙升\"><a href=\"#如何判断和发现CPU使用率飙升\" class=\"headerlink\" title=\"如何判断和发现CPU使用率飙升\"></a>如何判断和发现CPU使用率飙升</h3><p>首先我们先看一下，跟 CPU 使用率相关的有哪些指标。我们通过 <code>top</code> 命令就可以看到具体的信息</p>\n<p><img src=\"/../images/top.png\" alt=\"top\"><br>这些输出中有一行是 <code>%Cpu(s)</code>, 这行展示了 CPU 的整体使用情况，是一个百分比的形式，我们详细阐述下这几个字段的含义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">us, user    : time running un-niced user processes   未降低优先级的用户进程所占用的时间</span><br><span class=\"line\">sy, system  : time running kernel processes          内核进程所占用的时间</span><br><span class=\"line\">ni, nice    : time running niced user processes      降低优先级的用户进程所占用的时间</span><br><span class=\"line\">id, idle    : time spent in the kernel idle handler  空闲的时间</span><br><span class=\"line\">wa, IO-wait : time waiting for I/O completion        等待 I/O 操作完成所花费的时间</span><br><span class=\"line\">hi : time spent servicing hardware interrupts        处理硬件中断所花费的时间</span><br><span class=\"line\">si : time spent servicing software interrupts        处理软件中断所花费的时间</span><br><span class=\"line\">st : time stolen from this vm by the hypervisor      被虚拟机管理程序从此虚拟机中窃取的时间</span><br></pre></td></tr></table></figure>\n<p>在这些指标中，一般关注的比较多的就是 us、sy、id、wa（其他几个指标很高的情况我个人目前基本上没有遇到过）</p>\n<p>上述指标反映了系统整体的 CPU 情况。而程序在操作系统中实际上是以一个个的进程存在的，那我们如何确定到占用 CPU 高的进程呢？让我们的目光从 top 的头部信息往下移动，下面就展示了详细的进程信息<br><img src=\"/../images/top-process.png\" alt=\"top-process\"></p>\n<p>这些程序默认是按照 CPU 的使用率从高到底进行排序的，当然你也可以通过在<code>top</code>的时候输入<code>P</code>进行排序，这样我们就可以看到系统中消耗 CPU 资源的详细进程信息</p>\n<p>上面是我通过 <code>./sysstress cpu --cpu-number 10 --duration 10m</code> 压测程序跑出来的，可以看到这里的 sysstress 程序占用了 1002 的 %CPU，也就是说基本上是 10 个核心，那我们跑一个更高的，将<code>--cpu-number</code>加到 60 看看发生了什么<br><img src=\"/../images/stress-cpu.png\" alt=\"stress-cpu\"></p>\n<p>我们可以看到这次%CPU打到了 6000，那很多人就好奇我日常的程序跑到多高算高呢？</p>\n<p>这里我们需要明确一点，现在的服务器绝大部分都是多核心 CPU（1C2G这种自己用来玩的忽略），CPU 的核心数决定了我们程序在同一时间能够执行多少个线程，也就是说，这个高不高是相对于机器配置而言的。如果你的机器只有 16C，那么单个进程占用的 %CPU 到 1000，那么其实已经算是比较高了。如果是 256C 的CPU（土豪级配置），那么单个进程占用的 %CPU 到 6000，对于系统的稳定性影响就没有那么大了。</p>\n<p>上述我们说的情况是进程占用 CPU 对整个系统的影响，那么进程占用的 CPU 对系统的影响不大就代表这个程序一定没有问题吗？答案显然是未必的。</p>\n<p>我们还是要回归到业务本身，如果进程的 CPU 占用在业务变动不大的情况下，发生了异常波动，或者正常情况下业务不会消耗这么高的 CPU，那么我们就需要继续排查了。</p>\n<h3 id=\"如何确定CPU飙升的根源\"><a href=\"#如何确定CPU飙升的根源\" class=\"headerlink\" title=\"如何确定CPU飙升的根源\"></a>如何确定CPU飙升的根源</h3><p>这个问题的 核心是 CPU 上在运行什么东西。 多核心CPU 下，每个核心都可以执行不同的程序，我们如何确定一个进程中那些方法在消耗 CPU 呢？从而引申下面详细的问题:</p>\n<ol>\n<li>程序的调用栈是什么样的？</li>\n<li>调用栈信息中哪些是需要关注的，那些是可以忽略的？</li>\n<li>热点函数是什么？</li>\n</ol>\n<p>老话说得好，”工欲善其事，必先利其器”, 我们需要这些东西，就必须了解到什么样的工具可以拿到上面我提到的一些信息。接下来我将通过常用的后端语言：<code>golang</code> 和 <code>java</code> 为例构造一些高 CPU 的程序来进行展示。</p>\n<h4 id=\"perf命令\"><a href=\"#perf命令\" class=\"headerlink\" title=\"perf命令\"></a>perf命令</h4><p><strong>perf是一款Linux性能分析工具。Linux性能计数器是一个新的基于内核的子系统，它提供一个性能分析框架，比如硬件（CPU、PMU(Performance Monitoring Unit)）功能和软件(软件计数器、tracepoint)功能。</strong></p>\n<p>安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install perf   #Centos</span><br></pre></td></tr></table></figure>\n<p>安装完成后，我们可以首先看下 <code>perf</code>的用法，这里不展开具体用法，只列出我平常使用的几个命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top        System profiling tool.               #对系统性能进行实时分析。</span><br><span class=\"line\">record     Run a command and record its profile into perf.data     #收集采样信息</span><br><span class=\"line\">report     Read perf.data (created by perf record) and display the profile  #分析采样信息，和record配合使用</span><br></pre></td></tr></table></figure>\n<p>record 和 report 的使用更多在于 dump 当前环境的信息用于后续分析，如果在自己环境上测试，可以用 top 进行一些简单的实时分析（类似于 top 命令）。</p>\n<p>还是用之前的压测工具，我们模拟一个 10 核心的 10min 的压测场景</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ./sysstress cpu --cpu-number 10 --duration 10m &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p>执行这个语句，让压测程序在后台执行，然后我们通过<code>perf top</code>查看具体的情况（可以通过-p 指定 pid）</p>\n<p><img src=\"/../images/perftop.png\" alt=\"perf top\"></p>\n<p>从截图的信息中我们可以看到占用资源最多的一些方法，包括 sysstress 进程的各种方法(从图片中基本上就可以确定高消耗的方法在哪里)以及底层的 <code>__vdso_clock_gettime</code>, 那再结合压测工具的代码分析下:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">burnCpu</span><span class=\"params\">(wg *sync.WaitGroup, start time.Time, durSec <span class=\"type\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t_ = <span class=\"number\">1</span> * <span class=\"number\">1</span></span><br><span class=\"line\">\t\tnow := time.Now()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> now.Sub(start) &gt; time.Duration(durSec)*time.Second &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是方法的核心，其实就是做无意义的计算，外加时间的判断，超过 duration 就结束。这样和上面的 perf top 信息就能对应起来。</p>\n<p>然后我们用 java 写一个同样的程序，再看看 <code>perf top</code>的情况:<br><img src=\"/../images/javaperftop.png\" alt=\"perf top\"><br>从这一大段显示来看，是不是看的一脸懵逼，很难发现到底是什么程序在占用CPU 资源。大家可以看一下源程序:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                        Math.sin(Math.random());</span><br><span class=\"line\">                        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">currentTime</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的程序也是非常简单，启动 10 个线程，做一个无意义的数学运算，然后获取当前时间。从这段代码中是不是很难和上面<code>perf top</code>的显示关联起来？ 原因也非常简单， 像Java 这种通过 JVM 来运行的应用程序，运行堆栈用的都是 JVM 内置的函数和堆栈管理。所以，从系统层面只能看到 JVM 的函数堆栈，而不能直接得到 Java 应用程序的堆栈。那我们好能通过 perf 去看到 java 相关的堆栈吗？答案是可以的。</p>\n<p>可以借助 <a href=\"https://github.com/jvm-profiling-tools/perf-map-agent\">perf-map-agent</a> 这样的开源工具，去生成和<code>perf</code> 工具一起使用的方法映射，但是需要做额外的一些配置。这里的方法大家可以自己探究，为什么不详细的讲这个呢，原因也简单，排查问题的工具多种多样，没必要在一棵树上吊死。</p>\n<h4 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h4><p>既然 perf top 去查看 JAVA 的调用栈不太方便，我们就直接上 java 提供的 jstack 工具去分析。</p>\n<ul>\n<li>jstack -l pid &gt; xxx.txt 需要注意的是，linux系统中往往会用不同的用户去执行不同的程序，此时可能需要通过sudu -u xxx jstack的形式</li>\n<li>kill -3， jstack 用不了的情况下可以使用 kill -3 pid 的形式，堆栈会输出在系统日志中。</li>\n</ul>\n<p>具体的操作步骤:</p>\n<ol>\n<li><code>top -Hp $pid</code> 找到占用 CPU 的具体线程</li>\n<li><code>jstack -l $pid &gt; /tmp/$pid.jstack</code> 或者 <code>kill -3 $pid</code>将 java 进程的堆栈情况输出的日志中，然后根据 <code>top -Hp</code> 看到的线程信息在输出的堆栈日志中进行查找（<code>top -Hp</code> 输出的是 10 进制的 id，<code>jstack</code> 输出的是 16 进制的，在查找时注意进制转换）</li>\n</ol>\n<p>我们看下上面 java 程序的堆栈的信息:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2024</span><span class=\"number\">-08</span><span class=\"number\">-16</span> <span class=\"number\">15</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span></span><br><span class=\"line\">Full thread <span class=\"built_in\">dump</span> Java HotSpot(TM) <span class=\"number\">64</span>-Bit Server VM (<span class=\"number\">25.221</span>-b11 mixed mode):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Attach Listener&quot;</span> #<span class=\"number\">35</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f52b4001000</span> nid=<span class=\"number\">0x71f4</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;DestroyJavaVM&quot;</span> #<span class=\"number\">34</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0009800</span> nid=<span class=\"number\">0x1693</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Thread-1&quot;</span> #<span class=\"number\">25</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e015a800</span> nid=<span class=\"number\">0x16d9</span> runnable [<span class=\"number\">0x00007f52f64e3000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">\tat sun.misc.Unsafe.getObjectVolatile(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap.java:<span class=\"number\">755</span>)</span><br><span class=\"line\">\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:<span class=\"number\">938</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:<span class=\"number\">267</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:<span class=\"number\">227</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneRegion.ofId(ZoneRegion.java:<span class=\"number\">120</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">411</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">315</span>)</span><br><span class=\"line\">\tat java.util.TimeZone.toZoneId(TimeZone.java:<span class=\"number\">556</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.systemDefault(ZoneId.java:<span class=\"number\">274</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.Clock.systemDefaultZone(Clock.java:<span class=\"number\">178</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.LocalDateTime.now(LocalDateTime.java:<span class=\"number\">180</span>)</span><br><span class=\"line\">\tat Main$<span class=\"number\">1.</span>run(Main.java:<span class=\"number\">12</span>)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Thread-0&quot;</span> #<span class=\"number\">24</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0159000</span> nid=<span class=\"number\">0x16d8</span> runnable [<span class=\"number\">0x00007f52f65e4000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">\tat sun.misc.Unsafe.getObjectVolatile(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.ConcurrentHashMap.tabAt(ConcurrentHashMap.java:<span class=\"number\">755</span>)</span><br><span class=\"line\">\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:<span class=\"number\">938</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.zone.ZoneRulesProvider.getProvider(ZoneRulesProvider.java:<span class=\"number\">267</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.zone.ZoneRulesProvider.getRules(ZoneRulesProvider.java:<span class=\"number\">227</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneRegion.ofId(ZoneRegion.java:<span class=\"number\">120</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">411</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.of(ZoneId.java:<span class=\"number\">315</span>)</span><br><span class=\"line\">\tat java.util.TimeZone.toZoneId(TimeZone.java:<span class=\"number\">556</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.ZoneId.systemDefault(ZoneId.java:<span class=\"number\">274</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.Clock.systemDefaultZone(Clock.java:<span class=\"number\">178</span>)</span><br><span class=\"line\">\tat java.<span class=\"built_in\">time</span>.LocalDateTime.now(LocalDateTime.java:<span class=\"number\">180</span>)</span><br><span class=\"line\">\tat Main$<span class=\"number\">1.</span>run(Main.java:<span class=\"number\">12</span>)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"> <span class=\"comment\">--- 10 个 thread</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Service Thread&quot;</span> #<span class=\"number\">23</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0143800</span> nid=<span class=\"number\">0x16d6</span> runnable [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;C2 CompilerThread1&quot;</span> #<span class=\"number\">6</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e010e000</span> nid=<span class=\"number\">0x16c5</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"> <span class=\"comment\">--- 一大堆 C2 CompilerThread</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;C2 CompilerThread0&quot;</span> #<span class=\"number\">5</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e010b000</span> nid=<span class=\"number\">0x16c4</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Signal Dispatcher&quot;</span> #<span class=\"number\">4</span> daemon prio=<span class=\"number\">9</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0109800</span> nid=<span class=\"number\">0x16c3</span> runnable [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Finalizer&quot;</span> #<span class=\"number\">3</span> daemon prio=<span class=\"number\">8</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e00d8800</span> nid=<span class=\"number\">0x16c2</span> <span class=\"keyword\">in</span> Object.wait() [<span class=\"number\">0x00007f52f7bfa000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;<span class=\"number\">0x000000008021a5e8</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">\tat java.lang.ref.ReferenceQueue.<span class=\"built_in\">remove</span>(ReferenceQueue.java:<span class=\"number\">144</span>)</span><br><span class=\"line\">\t- locked &lt;<span class=\"number\">0x000000008021a5e8</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">\tat java.lang.ref.ReferenceQueue.<span class=\"built_in\">remove</span>(ReferenceQueue.java:<span class=\"number\">165</span>)</span><br><span class=\"line\">\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:<span class=\"number\">216</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Reference Handler&quot;</span> #<span class=\"number\">2</span> daemon prio=<span class=\"number\">10</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e00d3800</span> nid=<span class=\"number\">0x16c1</span> <span class=\"keyword\">in</span> Object.wait() [<span class=\"number\">0x00007f52f7cfb000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;<span class=\"number\">0x0000000080218d38</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class=\"line\">\tat java.lang.Object.wait(Object.java:<span class=\"number\">502</span>)</span><br><span class=\"line\">\tat java.lang.ref.Reference.tryHandlePending(Reference.java:<span class=\"number\">191</span>)</span><br><span class=\"line\">\t- locked &lt;<span class=\"number\">0x0000000080218d38</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class=\"line\">\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:<span class=\"number\">153</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">\t- None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;VM Thread&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e00ca000</span> nid=<span class=\"number\">0x16c0</span> runnable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;GC task thread#0 (ParallelGC)&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e001f000</span> nid=<span class=\"number\">0x1694</span> runnable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 一大堆 GC task thread</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;VM Periodic Task Thread&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00007f53e0146000</span> nid=<span class=\"number\">0x16d7</span> waiting on condition</span><br><span class=\"line\"></span><br><span class=\"line\">JNI global references: <span class=\"number\">202</span></span><br></pre></td></tr></table></figure>\n<p>我们通过 top -Hp 的信息就可以快速定位到 Thread-[0-9] 这几个线程，而每个线程的调用栈都是 <code>java.time.LocalDateTime.now</code>, 也说明了这个方法在不停消耗 CPU。（但是 jstack 只能捕获短时间或者顺时的堆栈信息，没法处理长时间的，所以我们在获取时可以多打印几次或者使用其他方法）</p>\n<p>至于 jstack 的详细用法，请参考我的另一篇博客：<a href=\"https://baixiaozhou.github.io/2024/08/13/JAVA%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/\">java问题定位</a></p>\n<p>除此之外，还有非常多的分析工具，pstack\\gstack\\strace\\gdb等等，大家可以自行探索使用</p>\n<h4 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h4><p>上面我们介绍了很多操作的命令和方法，那么有没有一种比较直观的方式能够直接看到各种方法执行的耗时比重等情况呢？火焰图就是为了解决这种情况而生的。</p>\n<p>火焰图的分类有很多，常用的包括:</p>\n<ol>\n<li>CPU 火焰图 (CPU Flame Graph)<ul>\n<li>   描述：展示 CPU 在不同方法上的消耗情况，显示每个方法调用所占用的 CPU 时间。</li>\n<li>   用途：用于分析 CPU 性能瓶颈，识别哪些方法消耗了最多的 CPU 资源。</li>\n<li>   应用：Java、C++ 等多种编程语言的性能分析。</li>\n</ul>\n</li>\n<li>内存火焰图 (Memory Flame Graph)<ul>\n<li>描述：展示内存分配情况，显示每个方法调用分配的内存量。</li>\n<li>用途：用于检测内存泄漏、过度内存分配问题，帮助优化内存使用。</li>\n<li>应用：常用于分析内存密集型应用，如 Java 应用的堆内存分析。</li>\n</ul>\n</li>\n<li>I&#x2F;O 火焰图 (I&#x2F;O Flame Graph)<ul>\n<li>   描述：展示 I&#x2F;O 操作的耗时情况，显示不同方法的 I&#x2F;O 操作占用的时间。</li>\n<li>   用途：用于分析应用程序的 I&#x2F;O 性能，识别慢速或频繁的 I&#x2F;O 操作。</li>\n<li>   应用：数据库查询、文件系统操作、网络通信等场景的性能调优。</li>\n</ul>\n</li>\n</ol>\n<p>我们这里通过 <a href=\"https://github.com/async-profiler/async-profiler\">async-profiler</a> 对文章上面的java压测程序进行抓取(这个工具只能抓 java 的)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzf async-profiler-3.0-linux-x64.tar.gz</span><br><span class=\"line\">cd async-profiler-3.0-linux-x64/bin</span><br><span class=\"line\">./asprof -d 60 pid -f /tmp/javastress.html</span><br></pre></td></tr></table></figure>\n<p>我们用浏览器打开生成的 html 文件，可以看到如下的火焰图信息（可以在网页进行点击，查看更细节的方法）<br><img src=\"/../images/javafire.png\" alt=\"java 程序的火焰图\"></p>\n<p>这样看起来就比 jstack这些信息更加直观一点。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}